#!/bin/sh
###############################################################################
#
#  $Id: configure,v 1.35 2004-07-16 18:58:16 debug Exp $
#
#  This is a minimal configure script for mips64emul. This script figures out
#  which compiler flags will work, and creates Makefiles in subdirs. A config.h
#  is also created.
#
#
#  --->   FOR NORMAL USE, JUST RUN ./configure WITHOUT OPTIONS!
#
#
#  To compile the emulator with profiling (during development), use
#  CFLAGS="-pg", run the emulator, and then run 'gprof mips64emul' and study
#  the results.
#
#
#  TODO:  The command line parsing is a mess.
#
#  The main things that need to be detected are:
#
#    o)  which compiler to use  (overridden by setting CC)
#    o)  which compiler flags to use  (overridden by setting CFLAGS)
#    o)  X11 flags and libraries  (TODO: should be possible to override)
#    o)  special hacks for some OSes
#    o)  binary translation (on supported platforms)
#    o)  prefetch capability  (TODO: this is assumed on Alpha, but not all
#                              Alphas have it...)
#
###############################################################################


if [ z"$*" != z ]; then
	#  Parse command line options:
	for a in $*; do
		if [ z$a = z--nox11 ]; then
			NOX11=YES
		else
			if [ z$a = z--mips16 ]; then
				MIPS16=YES
			else
				if [ z$a = z--delays ]; then
					DELAYS=YES
				else
					if [ z$a = z--caches ]; then
						CACHES=YES
					else
						echo "usage: $0 [options]"
						echo "  --caches    enable cache emulation"
						echo "  --delays    enable instruction latency/delay emulation"
						echo "  --nox11     configure without x11 support"
						echo "  --mips16    enable MIPS16 instruction support"
						exit
					fi
				fi
			fi
		fi
	done
fi


#############################################################################
#
#  Configure options:
#
#  This creates a config.h file, which is the included from include/misc.h.
#
#############################################################################

#  Head of config.h:
printf "/*
 *  THIS FILE IS AUTOMATICALLY CREATED BY configure!
 *  DON'T EDIT THIS FILE MANUALLY, IT WILL BE OVERWRITTEN.
 */
\n#ifndef CONFIG_H\n#define CONFIG_H\n\n" > config.h


#  Figure out if VERSION should be defined.
X=`basename \`pwd\`|cut -d \- -f 2-`
if [ z"$X" = zmips64emul ]; then
	echo '#  No VERSION defined.' >> _Makefile.header
else
	printf "#define VERSION \"$X\"\n" >> config.h
fi


#  MIPS16 support:
if [ z$MIPS16 = zYES ]; then
	echo 'Enabling MIPS16 support.   NOTE: MIPS16 support is not really working yet.'
	printf "#define ENABLE_MIPS16\n" >> config.h
fi


#  Instruction delay/latency emulation:
if [ z$DELAYS = zYES ]; then
	echo 'Enabling Instruction delay/latency emulation.'
	printf "#define ENABLE_INSTRUCTION_DELAYS\n" >> config.h
fi


#  Cache emulation:
if [ z$CACHES = zYES ]; then
	echo 'Enabling Cache emulation. (EXPERIMENTAL)'
	printf "#define ENABLE_CACHE_EMULATION\n" >> config.h

	if [ z$DELAYS != zYES ]; then
		printf 'WARNING. Cache emulation without instruction delay/latency emulation
(--delays) will not produce correct cache miss penalties and such.\n'
	fi
fi


#############################################################################
#
#  Create the Makefile header:
#
#############################################################################

rm -f _Makefile.header

printf "#
#  DO NOT EDIT THIS FILE! It is automagically created by
#  the configure script, based on Makefile.skel.
#\n\n" >> _Makefile.header


echo 'int main(int argc, char *argv[]) { return 0; }' > _testprog.c


#  Try to detect which C compiler to use, if CC is not set:
if [ z"$CC" = z ]; then
	CC=cc

	gcc _testprog.c -o _testprog > /dev/null 2> /dev/null
	if [ -x _testprog ]; then
		CC=gcc
	fi
	rm -f _testprog

	cc _testprog.c -o _testprog > /dev/null 2> /dev/null
	if [ -x _testprog ]; then
		CC=cc
	fi
	rm -f _testprog

	ccc _testprog.c -o _testprog > /dev/null 2> /dev/null
	if [ -x _testprog ]; then
		CC="ccc"
	fi
	rm -f _testprog
fi


if $CC -V 2> /dev/null | grep ompaq 1> /dev/null 2> /dev/null; then
	COMPAQCC=YES
fi


if [ z$NOX11 = z ]; then
	#  Try to compile a small X11 test program:
	printf "#include <X11/Xlib.h>
	#include <stdio.h>
	Display *dis;
	void f(void) {
		dis = XOpenDisplay(NULL);
	}
	int main(int argc, char *argv[])
	{ return 0; }
	" > _test_x11.c

	XOK=0

	XINCLUDE=-I/usr/X11R6/include
	$CC _test_x11.c -c -o _test_x11.o $XINCLUDE 2> /dev/null

	XLIB="-L/usr/X11R6/lib -lX11"
	$CC _test_x11.o -o _test_x11 $XLIB 2> /dev/null

	if [ -x _test_x11 ]; then
		XOK=1
	fi

	rm -f _test_x11 _test_x11.o

	if [ z$XOK = z0 ]; then
		XINCLUDE=""
		$CC _test_x11.c -c -o _test_x11.o $XINCLUDE 2> /dev/null

		#  -lsocket for Solaris
		XLIB="-lX11 -lsocket"
		$CC _test_x11.o -o _test_x11 $XLIB 2> /dev/null

		if [ -x _test_x11 ]; then
			XOK=1
		fi
		rm -f _test_x11 _test_x11.o
	fi

	if [ z$XOK = z0 ]; then
		echo Failed to compile X11 test program. Configuring without X11.
	else
		echo X11 includes: $XINCLUDE
		echo X11 libraries: $XLIB
		echo "XINCLUDE=$XINCLUDE" >> _Makefile.header
		echo "XLIB=$XLIB" >> _Makefile.header
		printf "#define WITH_X11\n" >> config.h
	fi

	rm -f _test_x11.c
fi


#  CWARNINGS:
$CC _testprog.c -o _testprog -Wall 2> /dev/null
if [ -x _testprog ]; then
	CWARNINGS="-Wall $CWARNINGS"

	#  Compaq's compiler always seems to warn about the long long type:
	if [ z"$COMPAQCC" = zYES ]; then
		CWARNINGS="$CWARNINGS -msg_disable longlongtype"
	fi
fi
rm -f _testprog


#  -lrt for nanosleep?
printf "#include <time.h>\n#include <stdio.h>
int main(int argc, char *argv[]){nanosleep(NULL,NULL);return 0;}\n" > _testns.c
$CC _testns.c -o _testns 2> /dev/null
if [ ! -x _testns ]; then
	$CC -lrt _testns.c -o _testns 2> /dev/null
	if [ ! -x _testns ]; then
		printf "WARNING! COULD NOT COMPILE WITH nanosleep AT ALL!\n"
	else
		#  -lrt for nanosleep
		OTHERLIBS="-lrt $OTHERLIBS"
	fi
fi
rm -f _testns.c _testns


#  strtoll/strtoull missing?
printf "#include <stdlib.h>
#include <limits.h>
#include <stdio.h>
int main(int argc, char *argv[]) {
  long long x = strtoll(argv[1], NULL, 0); return 0;}\n" > _tests.c
$CC _tests.c -o _tests 2> /dev/null
if [ ! -x _tests ]; then
	printf "WARNING! strtoll missing from libc. Hack: using strtoll = strtol and
strtoull = strtoul. This will only work correctly on a machine where
sizeof(long long) = sizeof(long)  (luckily, for most 64-bit archs, this is
the case.\n"
	printf "#define HACK_STRTOLL\n" >> config.h
fi
rm -f _tests.c _tests


#############################################################################
#
#  Dynamic binary translation (BINTRANS):
#
#  Should only be defined for compilers and architectures that really support
#  bintrans.  As of now, only gcc on Alpha does this.

if [ z"`uname -m`" = zalpha ]; then
	printf "#define ALPHA\n" >> config.h

	rm -f _alpha_asm_test.c _alpha_asm_test
	printf "int main(int argc, char *argv[]) { asm(\"imb\"); return 0; }\n" > _alpha_asm_test.c
	$CC _alpha_asm_test.c -o _alpha_asm_test > /dev/null 2> /dev/null
	if [ -x _alpha_asm_test ]; then
		printf "#define BINTRANS\n" >> config.h
	fi
	rm -f _alpha_asm_test.c _alpha_asm_test

	#  Try to detect prefetch-ability while we're at it:
	rm -f _alpha_asm_test.c _alpha_asm_test
	printf 'int main(int argc, char *argv[]) { int x; int *y = &x; asm ("ldl $31,0(%%0)" : : "g" (y)); return 0; }\n' > _alpha_asm_test.c
	$CC -O2 _alpha_asm_test.c -o _alpha_asm_test > /dev/null 2> /dev/null
	if [ -x _alpha_asm_test ]; then
		printf "#define HAVE_PREFETCH\n" >> config.h
		printf "#define PREFETCH(x) asm(\"ldl \$31,0(%%0)\" : : \"g\" (x))\n" >> config.h
	fi
	rm -f _alpha_asm_test.c _alpha_asm_test
fi

if [ z"`uname -m`" = zi386 ]; then
	printf "#define I386\n" >> config.h

	#  Uncomment this when bintrans is available for i386:
	#printf "#define BINTRANS\n" >> config.h
fi


#############################################################################
#
#  COPTIM:
#
#############################################################################

COPTIM=$CFLAGS


if [ z"`uname`" = zHP-UX ]; then
	COPTIM="-D_XOPEN_SOURCE_EXTENDED $COPTIM"
	printf "#define HPUX\n" >> config.h
fi


if [ z"`uname`" = zOSF1 ]; then
	COPTIM="-D_XOPEN_SOURCE=500 -D_OSF_SOURCE $COPTIM"
fi


if [ z"`uname`" = zLinux ]; then
	#  A special hack is needed to support off_t > 32 bits on
	#  32-bit Linux machines:
	COPTIM="-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE $COPTIM"
fi


if [ z"$COMPAQCC" = zYES ]; then
	#  -O4 is possible, but is -O3 better?
	COPTIM="-O4 $COPTIM"
else
	if [ z"`uname`" = zSunOS ]; then
		#  "cc", the system's default compiler:
		if [ z"$CC" = zcc ]; then
			COPTIM="-xO5 -xdepend $COPTIM"
		fi
		printf "#define SOLARIS\n" >> config.h
		OTHERLIBS="-lsocket $OTHERLIBS"
	else
		#  gcc or something else:
		$CC _testprog.c -o _testprog -O 2> /dev/null
		if [ -x _testprog ]; then
			rm -f _testprog
			$CC _testprog.c -o _testprog -O2 2> /dev/null
			if [ -x _testprog ]; then
				COPTIM="-O2 $COPTIM"
			else
				COPTIM="-O $COPTIM"
			fi
		fi
	fi
fi
rm -f _testprog


#  -fschedule-insns causes bugs on i386 with gcc,
#  but works OK on my alpha with ccc (compaq's cc).
if [ z"$COMPAQCC" = zYES ]; then
	$CC _testprog.c -o _testprog -fschedule-insns2 2> /dev/null
	if [ -x _testprog ]; then
		COPTIM="-fschedule-insns2 $COPTIM"
	fi
	rm -f _testprog

	$CC _testprog.c -o _testprog -fschedule-insns 2> /dev/null
	if [ -x _testprog ]; then
		COPTIM="-fschedule-insns $COPTIM"
	fi
	rm -f _testprog

#	#  -intrinsics
#	$CC _testprog.c -o _testprog -intrinsics 2> /dev/null
#	if [ -x _testprog ]; then
#		COPTIM="-intrinsics $COPTIM"
#	fi
#	rm -f _testprog

	#  -fast
	$CC _testprog.c -o _testprog -fast 2> /dev/null
	if [ -x _testprog ]; then
		COPTIM="-fast $COPTIM"
	fi
	rm -f _testprog
fi


#  -fpeephole
$CC $CFLAGS _testprog.c -o _testprog -fpeephole 1> _testprog.stdout 2> _testprog.error
cat _testprog.stdout >> _testprog.error
if grep peephole _testprog.error; then
	rm -f _testprog.error
else
	if [ -x _testprog ]; then
		COPTIM="-fpeephole $COPTIM"
	fi
fi
rm -f _testprog _testprog.error _testprog.stdout


#  -fmove-all-movables
$CC $CFLAGS -fmove-all-movables _testprog.c -o _testprog 1> _testprog.stdout 2> _testprog.error
cat _testprog.stdout >> _testprog.error
if grep movables _testprog.error; then
	rm -f _testprog.error
else
	if [ -x _testprog ]; then
		COPTIM="-fmove-all-movables $COPTIM"
	fi
fi
rm -f _testprog _testprog.error _testprog.stdout


#  -fomit-frame-pointer
$CC $CFLAGS _testprog.c -o _testprog -fomit-frame-pointer 1> _testprog.stdout 2> _testprog.error
cat _testprog.stdout >> _testprog.error
if grep frame _testprog.error; then
	rm -f _testprog.error
else
	if [ -x _testprog ]; then
		COPTIM="-fomit-frame-pointer $COPTIM"
	fi
fi
rm -f _testprog _testprog.error _testprog.stdout


#############################################################################

rm -f _testprog.c

INCLUDE=-I../include/

echo C compiler and flags: $CC $COPTIM $CWARNINGS $INCLUDE $OTHERLIBS
echo "CWARNINGS=$CWARNINGS" >> _Makefile.header
echo "COPTIM=$COPTIM" >> _Makefile.header
echo "INCLUDE=$INCLUDE" >> _Makefile.header
echo "CC=$CC" >> _Makefile.header
echo "OTHERLIBS=$OTHERLIBS" >> _Makefile.header
echo "" >> _Makefile.header
echo "MIPS_CC=mips64-unknown-elf-gcc -g -O3 -fno-builtin -fschedule-insns -mips4 -mabi=64" >> _Makefile.header
echo "MIPS_AS=mips64-unknown-elf-as -mabi=64" >> _Makefile.header
echo "MIPS_LD=mips64-unknown-elf-ld -Ttext 0xffffffff80030000 -e main --oformat=elf64-bigmips" >> _Makefile.header
echo "" >> _Makefile.header


for a in ./ src/ devices/ tests/; do
	cat _Makefile.header > $a/Makefile
	cat $a/Makefile.skel >> $a/Makefile
done

#  Insert SRCOBJS=... at the start of ./Makefile:
echo SRCOBJS=`cd src/; make printobjs; cd ..` > _Makefile_step2
cat Makefile >> _Makefile_step2
mv -f _Makefile_step2 Makefile

#  Tail of config.h:
printf "\n#endif  /*  CONFIG_H  */\n" >> config.h

#  Remove temporary Makefile header:
rm -f _Makefile.header

echo Configured. You may now run make to build mips64emul.

