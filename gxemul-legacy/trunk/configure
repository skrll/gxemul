#!/bin/sh
#
#  $Id: configure,v 1.7 2004-02-09 06:27:38 debug Exp $
#
#  Configure script for mips64emul.
#  This script figures out which compiler flags will work, and creates
#  makefiles in subdirs.
#

if [ z$1 != z ]; then
	if [ z$1 = z--nox11 ]; then
		NOX11=YES
	else
		echo "usage: $0 [options]"
		echo "  --nox11       configure without x11 support"
		exit
	fi
fi

rm -f _Makefile.header

printf "#
#  DO NOT EDIT THIS FILE! It is automagically created by
#  the configure script, based on Makefile.skel.
#\n\n" >> _Makefile.header


echo 'int main(int argc, char *argv[]) { return 0; }' > _testprog.c


#  CC:
if [ z"$CC" = z ]; then
	CC=cc
	gcc _testprog.c -o _testprog > /dev/null
	if [ -x _testprog ]; then
		CC=gcc
	fi
	rm -f _testprog

	cc _testprog.c -o _testprog > /dev/null
	if [ -x _testprog ]; then
		CC=cc
	fi
	rm -f _testprog

	ccc _testprog.c -o _testprog > /dev/null
	if [ -x _testprog ]; then
		CC="ccc"
	fi
	rm -f _testprog
fi


if [ z$NOX11 = z ]; then
	#  Try to compile a small X11 test program:
	printf "#include <X11/Xlib.h>
	#include <stdio.h>
	Display *dis;
	void f(void) {
		dis = XOpenDisplay(NULL);
	}
	int main(int argc, char *argv[])
	{ return 0; }
	" > _test_x11.c

	XOK=0

	XINCLUDE=-I/usr/X11R6/include
	$CC _test_x11.c -c -o _test_x11.o $XINCLUDE 2> /dev/null

	XLIB="-L/usr/X11R6/lib -lX11"
	$CC _test_x11.o -o _test_x11 $XLIB 2> /dev/null

	if [ -x _test_x11 ]; then
		XOK=1
	fi

	rm -f _test_x11 _test_x11.o

	if [ z$XOK = z0 ]; then
		XINCLUDE=""
		$CC _test_x11.c -c -o _test_x11.o $XINCLUDE 2> /dev/null

		#  -lsocket for Solaris
		XLIB="-lX11 -lsocket"
		$CC _test_x11.o -o _test_x11 $XLIB 2> /dev/null

		if [ -x _test_x11 ]; then
			XOK=1
		fi
		rm -f _test_x11 _test_x11.o
	fi

	if [ z$XOK = z0 ]; then
		echo Failed to compile X11 test program. Configuring without X11.
	else
		echo X11 includes: $XINCLUDE
		echo X11 libraries: $XLIB
		echo "XINCLUDE=$XINCLUDE" >> _Makefile.header
		echo "XLIB=$XLIB" >> _Makefile.header
		echo "XDEF=-DWITH_X11" >> _Makefile.header
	fi

	rm -f _test_x11.c
fi


#  CWARNINGS:
$CC _testprog.c -o _testprog -Wall 2> /dev/null
if [ -x _testprog ]; then
	CWARNINGS="-Wall $CWARNINGS"
	if [ z"$CC" = zccc ]; then
		CWARNINGS="$CWARNINGS -msg_disable longlongtype,questcompare2,intconcasttru,intconstsign,unusedtop,ptrmismatch1,cvtu32to64,duptypedef,intconsttrunc"
	fi
fi
rm -f _testprog


#  COPTIM:
COPTIM=$CFLAGS

if [ z"`uname -m`" = zalpha ]; then
	#  This is not an optimization, actually, just a flag:
	COPTIM="-DALPHA $COPTIM"
fi

if [ z"$CC" = zccc ]; then
	#  -O4 is possible, but -O3 is slightly better?
	COPTIM="-O3 $COPTIM"
else
	if [ z"`uname`" = zSunOS ]; then
		#  "cc", the system's default compiler:
		if [ z"$CC" = zcc ]; then
			COPTIM="-xO5 -fast $COPTIM"
		fi
		COPTIM="-DSOLARIS $COPTIM"
		OTHERLIBS="-lrt $OTHERLIBS"
	else
		#  gcc or something else:
		$CC _testprog.c -o _testprog -O 2> /dev/null
		if [ -x _testprog ]; then
			rm -f _testprog
			$CC _testprog.c -o _testprog -O2 2> /dev/null
			if [ -x _testprog ]; then
				COPTIM="-O2 $COPTIM"
			else
				COPTIM="-O $COPTIM"
			fi
		fi
	fi
fi
rm -f _testprog


#  -fschedule-insns causes bugs on i386 with gcc,
#  but works OK on my alpha with ccc (compaq's cc).
if [ z"$CC" = zccc ]; then
	$CC _testprog.c -o _testprog -fschedule-insns2 2> /dev/null
	if [ -x _testprog ]; then
		COPTIM="-fschedule-insns2 $COPTIM"
	fi
	rm -f _testprog

	$CC _testprog.c -o _testprog -fschedule-insns 2> /dev/null
	if [ -x _testprog ]; then
		COPTIM="-fschedule-insns $COPTIM"
	fi
	rm -f _testprog

	#  -intrinsics
	$CC _testprog.c -o _testprog -intrinsics 2> /dev/null
	if [ -x _testprog ]; then
		COPTIM="-intrinsics $COPTIM"
	fi
	rm -f _testprog

	#  -fast
	$CC _testprog.c -o _testprog -fast 2> /dev/null
	if [ -x _testprog ]; then
		COPTIM="-fast $COPTIM"
	fi
	rm -f _testprog
fi

$CC _testprog.c -o _testprog -fpeephole 1> _testprog.stdout 2> _testprog.error
cat _testprog.stdout >> _testprog.error
if grep peephole _testprog.error; then
	rm _testprog.error
else
	if [ -x _testprog ]; then
		COPTIM="-fpeephole $COPTIM"
	fi
fi
rm -f _testprog _testprog.error _testprog.stdout


rm -f _testprog.c

INCLUDE=-I../include/

echo C compiler and flags: $CC $COPTIM $CWARNINGS $INCLUDE $OTHERLIBS
echo "CWARNINGS=$CWARNINGS" >> _Makefile.header
echo "COPTIM=$COPTIM" >> _Makefile.header
echo "INCLUDE=$INCLUDE" >> _Makefile.header
echo "CC=$CC" >> _Makefile.header
echo "OTHERLIBS=$OTHERLIBS" >> _Makefile.header

for a in ./ src/ devices/; do
	cat _Makefile.header > $a/Makefile
	cat $a/Makefile.skel >> $a/Makefile
done

rm -f _Makefile.header

echo Configured. You may now run make to build mips64emul.

