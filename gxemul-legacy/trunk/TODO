$Id: TODO,v 1.374 2006-09-16 01:33:27 debug Exp $

Hm. This file is in random order, and not all parts of it are up-to-date.


Implementation:
	x)  Settings / expression evaluator:
		x)  Special handlers for Write! (E.g. MIPS coproc regs)
		x)  Rewrite all CPUs so that they register registers. :)
		x)  Begin on the expression evaluator.
	x)  Clock/timer framework:
		x)  FIGURE OUT A WAY TO TEST THE 8253 :)
		    Right now it doesn't seem to be used :)
		x)  Workarounds for the delays during NetWinder/CATS bootup?
		    Plug-and-play detection loops!
		x)  Go through all other machines, one by one, and fix them.
	x)  Device registry: Allow devices to be moved around;
		if there is a collision, return false. It is up
		to the caller to handle this situation!
		NOTE: Translations must be invalidated!
	x)  The TLB dump code could possibly be moved somewhere
		else? No need to include the dummy functions
		everywhere.
	x)  Factor out other things from cpu_*.c? (Turn CPU name
		detection into a macro?)
	x)  SH:
		x)  Argument passing for function calls?
	x)  Disassembly, nr of bytes read and given to the cpu specific
		disassemlby routine? It's too ugly now.
	x)  Alpha:
		x)  OSF1 PALcode, Virtual memory support.
		x)  PALcode replacement! PAL1E etc opcodes...?
		x)  Interrupt/exception/trap handling.
		x)  More work on bootup memory and register contents.
		x)  More Alpha machine types, so it could work with
		    OpenBSD, FreeBSD, and Linux too?
	x)  SPARC:
		x)  Implement Adress space identifiers.
		x)  Continue on the register windows.
	x)  Userland emulation?
	x)  Common dyntrans_abort() function, which stops dyntrans execution,
		and drops into the debugger (if running with -K).
	x)  HPCmips:
		x)  New screenshots, using MobilePro 770?
		x)  Figure out why Mobilepro800/880 with NetBSD/hpcmips
		    latest version are unstable during bootup.
		x)  Mouse/pad support! :)
		x)  A NIC? (As a PCMCIA device?)
	x)  Physical vs virtual breakpoints!
	x)  See netwinder_reset() in NetBSD; the current "an internal error
	    occured" message after reboot/halt is too ugly.
	x)  Revert the dyntrans page template experiment? Hm.
	x)  Refactor the cpu type detection/initialization/listing.
		Macro, which can be used as long as the cpu definitions
		contain a 'name'?
	x)  Testmachine includes:
		+ dev_fb block fill and copy
		+ dev_fb draw characters (from the built-in font)?
		+ dev_fb input device? mouse pointer coordinates and buttons
			(allow changes in these to cause interrupts as well?)
		+ Redefine the halt() function so that it stops "sometimes
		  soon", i.e. usage in demo code should be:
			for (;;) {
				halt();
			}
	x)  Nicer MIPS status bits in register dumps.
	x)  Alignment exceptions (MIPS, PPC, ARM?, ...)
	x)  Rewrite the networking stack:
		x)  Fix performance problems caused by only allowing a
		    single TCP packet to be unacked.
		x)  Don't hardcode offsets into packets!
		x)  Test with lower than 100 max tcp/udp connections,
		    to make sure that reuse works!
		x)  Make OpenBSD work better as a guest OS!
		x)  DHCP? Debian doesn't actually send DHCP packets, even
			though it claims to?
		x)  Multiple networks per emulation, and let different
		    NICs in machines connect to different networks.
		x)  Support VDE (vde.sf.net)? Easiest/cleanest (before a
		    redesign of the network framework has been done) is
		    probably to connect it using the current (udp)
		    solution.
		x)  Allow SLIP connections, possibly PPP, in addition to
		    ethernet?
	x)  Implement more ethernet NICs.
	x)  IOP (I2O) device?

Documentation:
	x)  Note about sandboxing/security:
		Not all emulated instructions fail in the way they would
		do on real hardware (e.g. a userspace program writing to
		a system register might work in GXemul, but it would
		fail on real hardware).  Sandbox = contain from the
		host OS. But the emulated programs will run "less
		securely".
	x)  Try NetBSD/arc 4.x! (It seems to work with disk images!)
	x)  NetBSD/pmax 4 install instructions: xterm instead of vt100!
	x)  DEVICE_TICK in technical.html
	x)  Rewrite the section about experimental devices, after the
	    framebuffer acceleration has been implemented, and demos
	    written. (Symbolic names instead of numbers; example
	    use cases, etc. Mention demo files that use the various
	    features?)
	x)  "a very simple linear framebuffer device (for graphics output)"
	    under "which machines does gxemul emulate" ==> better
	    description?
	x)  Better description on how to set up a cross compiler?
	    Example for MIPS64.

Long-term design:
	x)  Instruction combination collisions? How to avoid easily...
	x)  Think about how to do both SHmedia and SHcompact in a reasonable
	    way!
	x)  68K emulation; think about how to do variable instruction
	    lengths across page boundaries.
	x)  MAINBUS REDESIGN!
	x)  PCI redesign:
		x)  The device subsystem needs to be redesigned to allow
		    devices to be moved and/or disabled at runtime!
		x)  Interrupt routing! PCI interrupts, ISA interrupts, etc.
	x)  Dyntrans with valgrind-inspired memory checker. (In memory_rw,
	    it would be reasonably simple to add; in each individual fast
	    load/store routine = a lot more work, and it would become
	    kludgy very fast.)
	x)  Dyntrans with SMP... lots of work to be done here.
	x)  Dyntrans with cache emulation... lots of work here as well.
	x)  Reimplement the config file parser from scratch.

-------------------------------------------------------------------------------

Simple Valgrind-like checks?
	o)  Mark every address with bits which tell whether or not the address
	    has been written to.
	o)  What should happen when programs are loaded?  Text/data, bss (zero
	    filled). But stack space and heap is uninitialized.
	o)  Uninitialized local variables:
		A load from a place on the stack which has not previously
		been stored to => warning. Increasing the stack pointer using
		any available means should reset the memory to uninitialized.
	o)  If calls to malloc() and free() can be intercepted:
		o)  Access to a memory area after free() => warning.
		o)  Memory returned by malloc() is marked as not-initialized.
		o)  Non-passive, but good to have: Change the argument
		    given to malloc, to return a slightly larger memory
		    area, i.e.  margin_before + size + margin_after,
		    and return the pointer  + margin_before.
		    Any access to the margin_before or _after space results
		    in warnings. (free() must be modified to free the
		    actually allocated address.)

SMP:
	o)  dev_mp doesn't work well with dyntrans yet
	o)  In general, IPIs, CAS, LL/SC etc must be made to work with dyntrans

MIPS:
	+)  Some more work on opcodes.
		x) The "wait" instruction. How to implement this functionality?
			(SMP, non-MIPS, interrupt correctness, host idling, ...)
		x) MIPS64 revision 2.
			o)  Find out which actual CPUs implement the rev2 ISA!
			o)  DROTR32 and similar MIPS64 rev 2 instructions,
			    which have a rotation bit which differs from
			    previous ISAs.
			o)  EI and DI instructions for MIPS64/32 rev 2.
			    NOTE: These are _NOT_ the same as for R5900!
		x) _MAYBE_ TX79 and R5900 actually differ in their
		   opcodes? Check this carefully!
	o)  Dyntrans: Count register updates are probably not 100% correct yet.
	o)  64-bit ranges in src/cpus/memory_mips_v2p.c
	o)  Refactor code for performance and readability/maintainability.
	o)  (Re)implement 128-bit loads/stores for R5900.
	o)  R4000 and others:
		x)  watchhi/watchlo exceptions, and other exception
		    handling details
	o)  R10000 and others:  (R12000, R14000 ?)
		x)  memory space, exceptions, ...
		x)  use cop0 framemask for tlb lookups
		    (http://techpubs.sgi.com/library/tpl/cgi-bin/getdoc.cgi/hdwr/bks/SGI_Developer/books/R10K_UM/sgi_html/t5.Ver.2.0.book_284.html)

Dyntrans:
	x)  Redesign/rethink the delay slot mechanism used for e.g. MIPS,
		so that it caches a translation (that is, an instruction
		word and the instr_call it was translated to the last
		time), so that it doesn't need to do slow
		to_be_translated for each end of page?
	x)  Program Counter statistics:
		Per machine? What about SMP? All data to the same file?
		A debugger command should be possible to use to enable/
		disable statistics gathering.
		Configuration file option!
	x)  INVALIDATION should cause translations in _all_ cpus to be
	    invalidated, e.g. on a write to a write-protected page
	    (containing code)
	x)  16-bit encodings? (MIPS16, ARM Thumb, SH3, ...)
	x)  Lots of other stuff: see src/cpus/README_DYNTRANS
	x)  true recompilation backend? think carefully about this,
	    experiment in a separate project (not in GXemul)
		o) First test would be to just implement a simple
		   instruction such as MIPS' addiu or lui, on AMD64
		   hosts...
	x)  Idle loop detection? (Depends on target.) This feels ugly.

Transputer:
	x)  Implement support for Helios binaries.
	x)  Stack and register contents at startup?
	x)  Figure out how to boot an entire Helios distribution.
	x)  Implement all instructions. :)

RCA1802/RCA1805, CHIP8:
	x)  CHIP8 -> RCA180x conversion
		x)  Think about how to do dual-mode, variable-instr-length
		    ISAs, and switch between modes.
		x)  1805 "extended" opcode -> trigger CHIP8 emulation?
			That is, all calls 0NNN could point to 0x68 opcodes,
			which, if running on a 1802 in CHIP8-emulation-mode,
			would be manually interpreted.
		x)  Better solution:
			CHIP8 calls to 00xx => handle at high level,
			      calls to 0xxx in general = call 180X machine code
				(0000 = reboot?)
	x)  1802 info: http://www.nyx.net/~lturner/public_html/Cosmac.html
	    and:  http://www.elf-emulation.com/1802.html
	x)  1805 extended opcodes: Implement at least disassembly support!
	x)  Keyboard input.
	x)  Sound (beep only).
	x)  Slow-down to correct speed? Wikipedia: "it was usually operated
	    at 3.58 MHz/2 to suit the requirements of the 1861 chip which
	    gave a speed of a little over 100,000 instructions per second"
	    (Note that _CHIP8_ emulation would then be even slower.)
	x)  SCHIP48 (Super) emulation:
		Some more opcodes, 128x64 framebuffer, larger
		sprites and fonts.

Alpha:
	o)  OSF1 PALcode, virtual memory (tlbs etc).
	o)  Get {NetBSD,OpenBSD,Linux}/alpha booting. :)

SPARC:
	o)  Load/stores to alternate address spaces!
	o)  Save/restore register windows etc!
	o)  Finish the subcc and addcc flag computation code.
	o)  Add more registers (floating point, control regs etc)
	o)  Disassemly of some more instructions?
	o)  Are sll etc 32-bit sign-extending or zero-extending?
	o)  Finish the GDB register stuff.
	o)  SPARC v8, v7 etc?

Debugger:
	o)  How does SMP debugging work? Does it simply use "threads"?
		What if the guest OS (running on an emulated SMP machine)
		has a usertask running, with userland threads?
	o)  Try to make the debugger more modular and, if possible, reentrant!
	o)  Remove the emul command? (But show network info if showing
		machines?)
	o)  Generalize the expression evaluator. (debugger_expr.c?)
		("help expr" in the debugger to show help about expressions)
		settable variables	("show nr of instructions on average")
		emul[x]			defaults to current emul
		machine[x]		defaults to current machine
		cpu[x]			defaults to currently focused cpu
		registers		cpu arch dependent (#-prefix)
		symbols			@-prefix
		numeric constants	decimal, hex, and octal ($-prefix)
		boolean			yes,no, true,false
		operators (+ - * / % & | ^ !)
		parentheses for grouping subexpressions
		NOTE: the change from % to # for register prefix!
		examples:
				emul[0].machine[2].cpu[0].pc
				machine[test2].cpu[1].ra = main
				settings.show_trace_tree = yes
		Settings:
			o)  Read/write a setting given a name. (Read as
			    string and/or int64_t simultaneously?)

		Help command should have subsections! One for "expressions",
		mirrored in the documentation, but the internal help should
		be the one that should be considered correct.
	o)  see src/debugger.c for more

POWER/PowerPC:
	x)  find and fix the bug which causes NetBSD/macppc to fail after
	    an install!
	x)  PPC optimizations; instr combs
	x)  64-bit stuff: either Linux on G5, or perhaps some hobbyist
		version of AIX? (if there exists such a thing)
	x)  macppc: adb controller; keyboard (for framebuffer mode)
	x)  make OpenBSD/macppc work (PCI controller stuff)

Algor:
	o)  Other models than the P5064?
	o)  PCI interrupts... needed for stuff like the tlp NIC?

ARM:
	o)  ARM "wait"-like instruction?
	o)  try to get netbsd/evbarm 3.x running (iq80321)
	o)  make the xscale counter registers (ccnt) work
	o)  make the ata controller usable for FreeBSD!
	o)  zaurus for openbsd...
	o)  debian/cats crashes because of unimplemented coproc stuff.
	    fix this?

Cache simulation:
	o)  Command line flags for:
		o)  CPU endianness?
		o)  Cache sizes? (multiple levels)
	o)  Separate from the CPU concept, so that multi-core CPUs sharing
	    e.g. a L2 cache can be simulated (?)
	o)  Instruction cache emulation is easiest (if separate from the
	    data cache); similar hack as the S;I; hack in cpu_dyntrans.c.
	    NOTE: if the architecture has a delay slot, then an instruction
	    slot can actually be executed as 2 instructions.
	o)  Data cache emulation = harder; each arch's load/store routines
	    must include support? running one instruction at a time and
	    having a cpu-dependant lookup function for each instruction
	    is another option (easier to implement, but very very slow).

Documentation:
	o)  machines, cpus, devices.
	o)  Automagic documentation generation?
		x)  REMEMBER that several machines/devices can be in
			the same source file!
	o)  Try to rewrite the install instructions for those machines
	    that use 3MAX into using CATS or hpcmips? (To remove the need
	    to use a raw ffs partition, using up all of the disk image.)

More generic out_of_memory error reporting, and check everywhere!
	Causes:	OpenBSD has low default limits for normal users.
		Host is 32-bit? (32-bit hosts are limited to 4 GB or less
		of userspace memory.)
		You are actually low on RAM. (As trivial as this might sound,
		Unix systems usually allow processes to allocate virtual
		memory beyond the amount of RAM in the machine.)

Breakpoints: 32-bit vs 64-bit sign extension for MIPS, warnings, etc.
	Use the debugger's symbolic name stuff. (which will have to be
	extended soon to support stuff like  "2*x + symbol + y" etc. cool
	stuff)

The Device subsystem:
	x)  allow devices to be moved and/or changed in size (down to a
	    minimum size, etc, or up to a max size)
	x)  keep track of interrupts and busses? actually, allowing any device
	    to be a bus might be a nice idea.
	x)  turn interrupt controllers into devices? :-)
	x)  refactor various clocks/nvram/cmos into one device?

PCI:
	x)  last write was ffffffff ==> fix this, it should be used
	    together with a mask to get the correct bits. also, not ALL
	    bits are size bits! (lowest 4 vs lowest 2?)
	x)  add support for address fixups
	x)  generalize the interrupt routing stuff (lines etc). this should
	    be per machine? or per bus, that's better
	x)  add a "pcn" NIC (AMD PCnet32 Lance 79c970 (PCI 1022:2000)),
	    could be useful for several machine modes (Malta, Algor, evbarm,
	    hp700?, macppc, etc.)

Busses:
	o)  Redesign the entire "mainbus" concept!
	o)  Busses should be placed in a hierarchical tree!
	o)  Easily configurable interrupt routing in SMP systems.
	o)  Specific clock/bus speeds, cpu speeds etc.
	o)  Synchronization over network? or at least in dyntrans within
	    one emulated machine
	o)  dev->bus: TurboChannel, PCMCIA, ADB?

Config file parser:
	o)  Rewrite it from scratch!
	o)  Usage of any expression available through the debugger
	o)  Support for running debugger commands (like the -c
	    command line option)

Floating point layer:
	o)  make it common enough to be used by _all_ emulation modes
	o)  implement more stuff
	o)  non-IEEE modes (i.e. x86)?

Userland emulation:
	x)  Lots of stuff; freebsd and netbsd (and linux?) syscalls.
	x)  Dynamic linking? Hm.

Sound:
	x)  generic sound framework
	x)  add one or more sound cards as devices

ASC SCSI controller:
	x)  NetBSD/arc 2.0 uses the ASC controller in a way which GXemul
	    cannot yet handle. (NetBSD 1.6.2 works ok.) (Possibly a problem
	    in NetBSD itself, http://mail-index.netbsd.org/source-changes/
	    2005/11/06/0024.html suggests that.)
	    NetBSD 4.x seems to work? :)

Caches / memory hierarchies: (this is mostly MIPS-specific)
	o)  src/memory*.c: Implement correct cache emulation for
	    all CPU types. (currently only R2000/R3000 is implemented)
	    (per CPU, multiple levels should be possible, associativity etc!)
	o)  R2000/R3000 isn't _100%_ correct, just almost correct :)
	o)  Move the -S (fill mem with random) functionality into the
	    memory.c subsystem, not machine.c or wherever it is now
	o)  ECC stuff, simulation of memory errors?  (Machine dependent)
	o)  More than 4GB of emulated RAM, when run on a 32-bit host?
	    (using manual swap-out of blocks to disk, ugly)
	o)  A global command line option should be used to turn
	    cache emulation on or off. When off, caches should be
	    faked like they are right now. When on, caches and
	    memory latencies should be emulated as correctly as
	    possible.

File/disk/symbol handling:
	o)  Remove some of the complexity in file format guessing, for
		Ultrix kernels that are actually disk images?
	o)  Better handling of tape files
	o)  Read function argument count and types from binaries? (ELF?)
	o)  Better demangling of C++ names. Note: GNU's C++ differs from e.g.
	    Microsoft's C++, so multiple schemes must be possible. See
	    URL at top of src/symbol_demangle.c for more info.

Userland ABI emulation:
	o)  see src/useremul.c

Terminal/console:
	o)  allow emulated serial ports to be connected to the outside
	    world in a more generic way, or even to other emulated
	    machines(?)

Save state of the whole emulated machine, to be able to load it back
	in later?  (Memory, all device's states, all registers and
	so on.  Like taking a snapshot. (SimOS seems to do this,
	according to its website.))

Better framebuffer and X-windows functionality:
	o)  -Yx sometimes causes crashes.
	o)  Simple device access to framebuffer_blockcopyfill() etc,
	    and text output (using the built-in fonts), for dev_fb.
	o)  CLEAN UP the ugly event code
	o)  Mouse clicks can be "missed" in the current system; this is
	    not good. They should be put on a stack of some kind.
	o)  More 2D and 3D framebuffer acceleration.
	o)  Non-resizable windows?  Or choose scaledown depending
		on size (and center the image, with a black border).
	o)  Different scaledown on different windows?
	o)  Switch scaledown during runtime? (Ala CTRL-ALT-plus/minus)
	o)  Bug reported by Elijah Rutschman on MacOS with weird
	    keys (F5 = cursor down?).
	o)  Keyboard and mouse events:
		x)  Do this for more machines than just DECstation
		x)  more X11 cursor keycodes
		x)  Keys like CTRL, ALT, SHIFT do not get through
		    by themselves (these are necessary for example
		    to change the font of an xterm in X in the
		    emulator)
	o)  Generalize the framebuffer stuff by moving _ALL_ X11
		specific code to src/x11.c!

