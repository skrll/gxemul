mips64emul TODO
---------------

	Binary translation:  src/bintrans.c

	Userland ABI emulation: src/useremul.c

	GUI, interactive debugger?  GTK+?  (The GUI _must be optional_!)
		o)  Breakpoints (complex expressions? combinations of register states,
			memory accesses and so on)
		o)  Instruction trace
		o)  Disassembly of RAM (_NOT_ the same as instruction trace)
		o)  Function call trace
		o)  Inspection of CPU registers/state, coprocessor registers/state,
			any device registers/state/contents
			o)  Framebuffers in windows / tabs.
			o)  Contents of RAM
		o)  "Start new emulation" should allow amount of
			RAM and nr of cpus to easily be specified. Multiple simultaneous
			machines should be possible.
		o)  Disk images.

	Save state of the whole emulated machine, to be able to load it back
		in later?  (Memory, all device's states, all registers and
		so on.  Like taking a snapshot)

	Caches / memory hierarchies:
		o)  Implement correct cache emulation (per CPU, multiple
		    levels should be possible)
		o)  Increase performance of the emulator by caching data on the
		    host (separately, but in cooperation with the emulated CPUs'
		    caches).  A small number (say ~ 32) of small cache blocks
		    (a few KBs at most) might do it.
		o)  Move the -H (fill mem with random) functionality into the
			memory.c subsystem, not machine.c or wherever it is now
		o)  ECC stuff, simulation of memory errors?  (Machine dependant)
		o)  More than 4GB of emulated RAM, when run on a 32-bit host?
			(using manual swap-out of blocks to disk, ugly)

	CPU Emulation:
		o)  Instructions:
			o)  Regression tests (see tests/README for more info)
			o)  Floating point instructions!
			o)  Finish the MIPS16 translator, and test it!
			o)  MIPS V (SIMD vector stuff?)
			o)  MDMX?  (MIPS Digital Media Extension)
			o)  Warn about mis-used bit fields (ie bits that should be
			    all zeroes, warn about if they are not)!
			    Both for coprocessor registers and for instruction opcodes.
			o)  warn and/or cause exceptions for unimplemented instructions
			    (depending on CPU type)
		o)  Nr of instructions per second is NOT the number of cycles
		    per second, this is CPU dependant.  Several subsystems (CPUs,
		    other systems) may need to have speeds fixed relative to each
		    other.
		o)  R2000/R3000:
			x)  Make sure that registers (INCLUDING coprocessor registers)
			    are always sign-extended. (32-bit stuff)
			x)  R3000 "tri-byte stores"???
			x)  Delay after R3000 interrupt enabling instructions (write to cop0),
			    before interrupts are actually enabled. (?)
		o)  R4000 and others: (R4*, R5* ?)
			x)  watchhi/watchlo exceptions, and other exception handling details
		o)  R10000 and others:  (R12000, R14000 ?)
			x)  memory space, exceptions, ...
			x)  use cop0 framemask for tlb lookups
			    (http://techpubs.sgi.com/library/tpl/cgi-bin/getdoc.cgi/hdwr/bks/SGI_Developer/books/R10K_UM/sgi_html/t5.Ver.2.0.book_284.html)
		o)  Implement load delays?  Warnings on interlocks.
		o)  Implement all coprocessor 0 bits / functions.
			x)  coproc 0 selectors! (R4000 ?)
			x)  BEV and all exception vectors....
		o)  R4300:  mmu? nintendo64
		o)  R5900:  weird TLB/cache? 128-bit GPRs? new instructions?
		o)  5K (note: NOT R5000)
		o)  R6000 (ISA II), R8000, R20000 ?

	Emulation of specific machines and devices:
		o)  Binary tree for memory mapped devices!
		o)  Separate RAM as yet another device (a "RAM device"), replacing the
			'memory' system with a more generic 'memory controller'.
		o)  "wdc" IDE controller!
		o)  SCSI controllers!
		o)  Busses, interrupt systems, and ROM emulation:
			x)  Make interrupt sharing more generic!
			x)  PCI:  i/o and interrupts
			x)  TURBOchannel  (many DEC systems)
			x)  ARCBIOS (SGI, arc?)
			x)  QBus-22 (DECsystem 5500, 5400?)
		o)  DECstations (pmax):
			boot directly from disk/cd-rom images
			framebuffers:
				PMAG-AA: VDAC, cursor
				PMAG-BA: VDAC, cursor?
				programmable cursors, overlays, 2D/3D acceleration, VDACs
			status words / control words, make this more portable/cleaner
			scsi controller(s): sii, asc (+ DMA)
			ethernet controller(s): le, fddi?
			serial controllers: dc, ssc, scc
			nvram on decstation 5000/125:  when using X11, set console=g or similar
			DECstation 5840? "xbi-based SMP"
		o)  SGI and ARC machines (sgimips, arc):
			x)  Finish the SGI O2 framebuffer and keyboard support
			x)  SMP / NUMA?
			x)  Jazz (ARC)
			x)  Interrupts (PCI and others) (both ARC and SGI)
		o)  Cobalt:  PCI and interrupt system, ethernet, harddisk controller(s)
		o)  Playstation 2:
			R5900 "weird" instructions (most needed by Linux and NetBSD are
				already implemented, but perhaps others are needed as well)
			Hardware:  OHCI usb controller, keyboard, IDE controller, ...
			Has an R3000A as a subsystem (!)
		o)  Playstation 1? R3000A. Weird hardware? No FPU, but something as coproc 2.
		o)  hpcmips:  framebuffer(s) and harddisk controller, among other things
		o)  Nintendo 64, http://www.nintendo.com/systems/n64/n64_specs.jsp  (R4300, 4MB RAM, really weird memory map)
		o)  newsmips?
		o)  mipsco?

	Multi-cpu stuff:
		o)  SGI's NUMA architecture. Study
			x)  Linux sources
			x)  SGI's specs on NUMA address space
		o)  Ultrix?  (NetBSD is not SMP yet on any MIPS platform, it seems.)
		o)  Own experiments with ycx2.

	Framebuffer stuff:
		o)  "Sprites", or overlays  (useful for cursors...)
		o)  2D and 3D acceleration
		o)  Move the polygon drawing stuff to its own module.
		o)  Antialiased polygons? :-)

	File handling:
		o)  Read function argument count and types from binaries? (ELF?)
		o)  zlib support (should be optional) for:
			x)  loading gzipped kernels directly
			x)  (read-only) disk images (?)
		o)  ELF: separate LE/BE (MIPS instruction format) from LSB/MSB
			(ELF structure format)

	Better X-windows functionality:
		o)  Switch scaledown during runtime? (Ala CTRL-ALT-plus/minus)
		o)  Keyboard and mouse events:
			x)  Do this for more machines than just DECstation
			x)  How about multiple framebuffer windows?
		o)  Non-resizable windows
		o)  Color support for non-24-bit modes?
		o)  Generalize the framebuffer stuff by moving _ALL_ X11 specific
			code to src/x11.c!

	Profile the whole emulator, and try to increase performance.

	Statistics:  (this could be interesting)
		o)  memory accesses (to measure cache efficiency and
			page coloring efficiency)
		o)  nr-of-instructions-in-a-row-that-don't-affect-eachother,
			and make histograms of this data
		o)  nr of simultaneous ASIDs in use in the TLB  (x = time)
		o)  position of read/write on (SCSI) disks   (x = time)

	Make sure that the emulator compiles and runs on as many Unices as
	possible, with different compilers and compiler settings. (Maybe on
	non-Unix-like systems too, if the X11 stuff is separated well enough.)

	Write Documentation (TeX/HTML/manpages, or DocBook?):
		o)  User's guide
		o)  Internals

