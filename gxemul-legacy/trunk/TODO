$Id: TODO,v 1.574 2007-12-13 23:22:05 debug Exp $

Some things, in no specific order, that I'd like to fix:
(Some items in this list are perhaps already fixed.)

-------------------------------------------------------------------------------

1. Who will Own the components?
   The main GXemul object.
   Unless they are deleted. Then the undo stack will own them.

2. Implement header files for Components, etc:

	Component
		constructor:
			Component = 0 virtual	State should be same as after a Reset.
		functions:
			Reset			(e.g. if after loading a saved state, the user
						wishes to restart as if the components were Clean)
			SetParent(Component)
			GetChildren
			GetTooltip		Default is something like description + "\n" + instance name
			Get/Set state variables!
			SaveState		(save/load the state variables)
			LoadState		(default behaviour is to save/load raw "state variables")
		vars:
			class name	(e.g. "pcibus")
			description	(e.g. "PCI bus")
			instance name	(e.g. "pcibus0")	May not contain "."
			children	(pointers to other Components)
			state variables... (How?)
					Perhaps:  name = value, where value can only be one of a
								few predetermined types.

3. New component source code tree:

	src/components/
		dummy/			Contains dummy test components, for testing
					the components framework (e.g. serialization...)
		cpus/
			CPU		class CPU : public Component, etc
			arm/
			alpha/
			mips/		etc. One for each CPU architecture
		displays/
			rgbmonitor	RGB monitor, for e.g. VGA output.
			lcd		LCD display
			led		A single led :)
		network/		Ethernet and others end up here
		busses/			TurboChannel, ISA, PCI, ...
		devices/		MISC stuff ends up here, including
					e.g. VGA graphics cards!

4. New debugger with basic functionality:
	* Built-in:
		quit
		help
		version
		undo
		redo
		tree    	Look at current configuration tree of components.
		focus   	Set focus to somewhere in the tree (given a "path").
		add     	Add a component somewhere in the tree.
		remove  	Remove a component (including recursively removing all its children)
		save    	Save configuration.
		load    	Load configuration.
		reset   	Reset configuration (i.e. reset all components).
		print expr  	Prints expression (gets a state variable)
		expr = value	Sets a state variable

5. Unit tests!!!


	x)  GTKMM GUI:
		+)  Menu bar:
			File
				New ->
					Emulation
					Emulation from template
					-----------------------
					GXemul instance
				Open
				Save
				Save as...
				-----------
				Quit
			View
				[ ]  Show toolbar
				[ ]  Show workspace
				[ ]  Show debug console
			Emulation
				Start
				Pause/unpause
				Reset
				-------------
				Edit annotation
			Help
				About

		+)  Toolbar button area:
			Play (start emulation)
			Pause (pause emulation, button kept down until
					unpaused)
			Reset (with a dialog asking for confirmation)
		    (Optional plug-in-ability/extensibility. Buttons should
		    be bound to debugger commands.)

		+)  "Workspace", where emulations can be created
		    by drag-n-drop of components from a palette, and/or
		    from other emulations.

		    The design mode should use cairo for drawing.

		    Dockable/undockable windows for machines/devices/
		    I/O-units' contents.

		    Tooltips for components.

		    (Tooltips should be a "summary" of the entire
		    state window.)

		+)  Debug console:
		    A text area with a text entry field. Simply a way
		    to get the same kind of interaction that will be
		    available via the console-mode debugger.
		    Click e.g. the "play" button would automatically
		    execute the command "continue" in the debugger.

	x)  New debugger.
		x)  "Object oriented" hierarchy, so that e.g.
			print machine.pci0.dc0.register_this_and_that
		    would work.
		x)  Tab completion, for all commands, including the
		    object oriented extensions / variable names / etc.
		    INCLUDING tab completion inside sub components.
		    This might feel odd, but that would allow one to
		    type pci<TAB> to expand to machine.pci0  (if there
		    only is one pci bus), or if there are, say, three
		    machines with pci busses, that would give a
		    tab completion list, similar to this:
			machine0.pci0
			machine1.pci0
			machine1.pci1
			machine2.pci0
		x)  Strings should be supported, both for e.g. variable
		    assignment, and for e.g. placing strings in memory.
		x)  Arrays?

	x)  Regular saving of state with time stamps (i.e. cycle numbers),
	    so that running "backwards" is possible!
	    NOTE:
		1) This must include network packages and disk image
		   contents! Tricky. But perhaps doable.
		2) Must be possible to use both from the UI (a "step
		   backwards" button?) and the debugger.

	x)  Actual machines being emulated 1 per process? Or all in the
	    same process?

	x)  There can now be links directly into the documentation,
	    assuming it is installed. ($PREFIX/share/doc/gxemul/*.html)


