Code generation thoughts
------------------------

2009-02-13: Writing down initial thoughs about micro-ops, how to translate
	simple stuff like "addu", and how register caching/delayed write back
	is done, and how emulated load/store could work (with pessimistic
	register caching).

Random ramblings, which (I hope) will be the basis for the IR and native
code generator in GXemul 0.5.x:


machine code to emulate -> calls

Example:

	e.g. MIPS:  addu rA, rB, rC

	becomes
		load rB into register_1			(load)
		load rC into register_2			(load)
		register_3 = register_1 + register_2	(add)
		store register_3 into rA		(store)

		load PC into register_4			(load)
		register_4 += 4				(add)
		store register_4 into PC		(store)


So the MIPS emulation code is responsible for building up a translation
block, by calling the appropriate functions above:  load, load, add, store,
load, add, store   when translating the "addu" instruction.

When calling 'load', the MIPS translation code gets the register ID in
return. It may be a new unique ID, or a reused cached one. It doesn't
matter to the MIPS code.

These calls then either build up a list of commands that are machine
(host) independent (just IR), or they generate native code.

For native code generation, native host register are to be used, in a
Least-Recently-Used fashion.

Cached loads:
	'load rB into register_X'  may involve an actual load
	of variable rB into a new register (LRU allocated), or the
	back-end may simply realize that a native host register already
	has that variable cached. In that case, that specific register
	number is returned, and no load occurs.

Delayed stores:
	'store register_3 into rA' may be implemented as a direct
	store of register_3 into variable rA, or (better) the back-end
	keeps track of which variables+registers are "dirty" and need
	to be written back to memory.
	
An explicit 'flush' should flush all outstanding stores.
This needs to be done before branching away.


Longer example:

	e.g. MIPS:
		addu rA, rB, rC
		xor  rA, rA, rD
		and  rA, rA, 0x0fff

	becomes
		load rB into register_1			(load)
		load rC into register_2			(load)
		register_3 = register_1 + register_2	(add)
		(delayed) store register_3 into rA	(store)

		load PC into register_4			(load)
		register_4 += 4				(add)
		(delayed) store register_4 into PC	(store)

		(cached) load rA into register_3	(load)
		load rD into register_5			(load)
		register_3 = register_3 xor register_5	(xor)
		(delayed) store register_3 into rA	(store)

		(cached) load PC into register_4	(load)
		register_4 += 4				(add)
		(delayed) store register_4 into PC	(store)

		(cached) load rA into register_3	(load)
		register_6 = (constant) 0x0fff		(let)
		register_3 = register_3 and register_6	(and)
		(delayed) store register_3 into rA	(store)

		(cached) load PC into register_4	(load)
		register_4 += 4				(add)
		(delayed) store register_4 into PC	(store)

		And then everything is flushed at the end of translation,
		i.e. all delayed stores are written to memory:

		store register_3 into rA
		store register_4 into PC

	The end result, where only actual operations are included:

		load rB into register_1			(load)
		load rC into register_2			(load)
		register_3 = register_1 + register_2	(add)  (*)
		load PC into register_4			(load)
		register_4 += 4				(add)
		load rD into register_5			(load)
		register_3 = register_3 xor register_5	(xor)
		register_4 += 4				(add)
		register_6 = (constant) 0x0fff		(let)
		register_3 = register_3 and register_6	(and)
		register_4 += 4				(add)
		store register_3 into rA
		store register_4 into PC

	13 instructions for 3 MIPS instructions. (Note that e.g. (*) becomes
	2 instructions on x86, so the total is 14.)

After this, the next optimization would be to gather "add/sub/inc/dec"-like
operations for delay-stored registers, so that the register_4 += 4 operations
are not performed until absolutely necessary, i.e. before the register is
read from or stored.

		load rB into register_1			(load)
		load rC into register_2			(load)
		register_3 = register_1 + register_2	(add)  (*)
		load PC into register_4			(load)
		load rD into register_5			(load)
		register_3 = register_3 xor register_5	(xor)
		register_6 = (constant) 0x0fff		(let)
		register_3 = register_3 and register_6	(and)
		register_4 += 12			(add, accumulated)
		store register_3 into rA
		store register_4 into PC

= 12 x86 instructions.

I.e. there are two forms of delayed operations on a register:
	delayed offseting   (adding or subtracting immediate values)
	delayed store

i.e. each backend register has:

		bool	reserved;	// reserved (e.g. for cpu struct)

		bool	valid;		// the register is in use, and holds
					// something read from addr.

		bool	dirty;		// needs writing back to memory. addr
					// is valid.

		int	dirty_offset;	// value to add before writing back

		addr	address;	// address (or offset into the cpu
					// struct) that this register corresponds
					// to. (Only valid if valid=true.)

		int	implementation_register; // technical backend register
					// number.

(The case  dirty == true && valid == false  cannot happen.)

A code generator has a vector holding all the registers (a fixed, known amount
of registers), and a doubly-linked list of references into the vector.
Only _available_ registers are in the linked list, while _all_ registers
(including the one reserved for the CPU struct) are in the vector.

The goal is to design the IR and native code generators so that all this is
done in-place in memory, and no additional optimization passes should be
necessary.


Native backend-specifics:

	1 register will always need to hold a pointer to the CPU structure,
	so that variables (emulated registers) can be loaded/stored efficiently.
	Other available registers will be reused from a list of registers,
	where used registers are moved to the front of the list.
	To get a new register, the back of the list is used. If that register
	is dirty, it is stored back (potentially after adding/subtracting
	a constant immediate from it) before being moved to the front of the
	list.

Non-native backend:  (just IR)

	If there is no native backend, the micro-operations must still be in
	a format that can be executed. One way is to have a fake register
	model with a few registers (e.g. 8).

		ir_load(CPU *cpu, void *args)
		{
			/*  Arguments to 'load':  */
			size_t offset = args[...];
			int regnr = args[...];

			uint32_t loaded_value = *(((uint64_t *) cpu) + offset);
			register[regnr] = loaded_value;
		}
		
	and args would contain things that vary, and cannot be coded into
	the ir_load code at compile time.



Example:
	(emulated 32-bit load)
		ld rX,rY,1234

	operations:
		(flush)

		; Get the emualted address to load from:
		load rY into register_1			(load)
		register_2 = 1234			(let)
		register_3 = register_1 + register2	(add)

		; Get offset within page
		register_4 = register_3 & 0x0fff	(and)

		; Get the page index:
		register_3 >>= 12			(shr)

		(set register caching to pessimistic)

		; Read the page pointer from the host_load array:
		register_5 = cpu + offset_of_host_load	(add)
		load from addr in register_5 to register_6  (load)
		branch to L1 if register_6 != 0		(branch if !=0)

		; The page doesn't exist. Check for device/bus/cache access:
		register_5 = cpu + offset_of_host_device_load	(add)
		load from addr in register_5 to register_6  (load)
		branch to L2 if register_6 != 0		(branch if !=0)

		; Neither direct memory nor device access. Let's call the
		; generic bus access routine for the address in question
		; (register_3). It may succeed (potentially updating tables)
		; or fail.

		call generic bus access with addr = register_3	(call C)
		if return value was failure, then break out of
			code execution!				(...?)
		branch to L3				(branch)

		; We're here if the address can be handled by a device:
		L2:

		call device access with addr = register_3	(call C)
		if return value was failure, then break out of
			code execution!				(...?)

		branch to L3				(branch)

		; We're here if the page is a native host page:
		L1:					(label)

		register_4 >>= 2			(shr)
		load from addr register_3 + register_4 * 4 into register_7 (load)
		(delayed) store register_7 into rX	(store)

		; Done. :)
		L3:					(label)

		(set register caching to normal mode)

The register caching mechanism needs to be set to pessimistic mode, because
there are multiple code paths leading to L3. That is, at L3, we cannot be
sure about the contents of any register being written to since the register
caching was set to pessimistic.

When storing values in registers when pessimistic mode is on:
	the register is marked as non-dirty (so that it isn't written back
		to memory later)
	the register is marked as non-valid (!)  so that it isn't reused
		later (since different code paths may have a different view
		of the register)
	store opcodes are not delayed
	add/inc opcodes are not delayed

It is therefore important that code uses as FEW registers as possible in
pessimistic mode, since they are all "destroyed".

The 'label' opcode is not valid unless pessimistic mode is used!

More complex cases:
	64-bit (multilevel tables).
	Alignment checks.
	Instruction cycle counts (similar to PC increases).

TODO: What about continuation after a failure? The PC was updated (flushed),
so there's no problem on where to continue, BUT will the code need to be
translated multiple times? E.g.:

	addr 0:  load blah1
	addr 4:  load blah2
	addr 8:  load blah3

would be translated to:

	(at addr 0):	load blah1
			load blah2
			load blah3

	(at addr 1):	load blah2
			load blah3

	(at addr 2):	load blah3

But maybe that's not too bad in practice, since the translation will only be
done if necessary, i.e. if both load blah1 and load blah2 _fail_!

The problem may be avoided by having a reasonable large "emulation TLB" (not
to be confused with the TLB of the emulated CPU).


-----------------------------------------------------


TODO: Plan emulated:
	comparison instructions
	branches:
		branches to "anywhere" (register)
		branches to code already generated in the same translation block
		conditional branches
		branches with delay slots!
	floating point (?)
	code that is too complex to implement as inlined micro-ops.

TODO: IMPLEMENT EVERYTHING for amd64, alpha, and for the case without a backend.


-----------------------------------------------------

Operations so far:
	load, store
	add, xor, sub, and, shr, ... (arithmetic and logic)
	register caching pessimistic mode on/off
	let
	branch, conditional branch on register value, ...
	label
	call C
	return/break on failure from call C


