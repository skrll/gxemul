#!/bin/sh
###############################################################################
#
#  Copyright (C) 2003-2009  Anders Gavare.  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. The name of the author may not be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
#  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGE.
#
#
#  This is a minimal configure script, hardcoded for GXemul. This script
#  figures out which compiler flags will work, and creates Makefiles in
#  sub-directories. A config.h file and some other build-specific .h files
#  are also created.
#
#
#  --->   FOR NORMAL USE, JUST RUN ./configure WITHOUT OPTIONS!
#
#
#  To compile the emulator with profiling (during development), use
#  CXXFLAGS="-pg", run the emulator, and then run 'gprof gxemul' and study
#  the results.
#
#
#  The main things that are detected by this script:
#
#    o)  special hacks for some OSes
#    o)  which compiler to use  (overridden by setting CXX)
#    o)  which compiler flags to use  (overridden by setting CXXFLAGS)
#    o)  X11 flags and libraries  (TODO: should be possible to override
#	 via command line options?)
#
#  The general philosophy regarding command line switches is that anything
#  which can be incorporated into the program as a runtime command line option
#  should be, instead of requiring a recompile.
#
###############################################################################

# Default prefix for "make install"
DEFAULTPREFIX=/usr/local

# Auto-detect X11, GLIBMM, I18N, and native code ABI support:
WITHI18N=""
WITHGLIBMM=""
WITHX11=""
WITHNATIVECODE=""

DEBUG=NO

#  Figure out if this is a stable version. Stable versions are numeric (0.x.x),
#  unstable are dates (e.g. 20090103) or have no ending at all.
X=`basename \`pwd\`|cut -d \- -f 2-|cut -c1-2`
if [ z"$X" = z0. ]; then
	#  Stable.
	WITHUNITTESTS=NO
else
	#  Development.
	UNSTABLE=YES
	WITHUNITTESTS=YES
fi

if [ z"$*" != z ]; then
	#  Parse command line options:
	for a in $*; do
		if [ z$a = z--debug ]; then
			DEBUG=YES
		else if [ z$a = z--with-i18n ]; then
			WITHI18N=YES
		else if [ z$a = z--without-i18n ]; then
			WITHI18N=NO
		else if [ z$a = z--without-native-code ]; then
			WITHNATIVECODE=NO
		else if [ z$a = z--with-x11 ]; then
			WITHX11=YES
		else if [ z$a = z--without-x11 ]; then
			WITHX11=NO
		else if [ z$a = z--with-unit-tests ]; then
			WITHUNITTESTS=YES
		else if [ z$a = z--without-unit-tests ]; then
			WITHUNITTESTS=NO
		else if [ z$a = z--help ]; then
			printf "usage: $0 [options]\n\n"
			if [ z"$UNSTABLE" = zYES ]; then
				echo "  --debug                    configure" \
					"for a debug build"
				echo "  --without-unit-tests       build without" \
					"unit tests"
			else
				echo "  --with-unit-tests          build with" \
					"unit tests (increases binary size)"
			fi
			echo "  --without-native-code      build without support for native code generation,"
			echo "                             even if the host ABI is supported"
			echo "  --with-x11                 build with X11 framebuffer support"
			echo "  --without-x11              build without X11 framebuffer support"
			echo "  --with-i18n                build with I18N support"
			echo "  --without-i18n             build without I18N support"
			echo
			echo "(default is to detect X11 and I18N support automatically)"
			echo
			echo "If the PREFIX environment variable is set," \
			    "it will override the default"
			echo "value, which is: $DEFAULTPREFIX"
			echo
			exit
		else
			echo "Invalid option: $a"
			echo "Run  $0 --help  to get a list of" \
			    "available options."
			exit
		fi; fi; fi; fi; fi; fi; fi; fi; fi
	done
fi


###############################################################################
#
#  Configure options:
#
#  This creates a config.h file, which is then included from include/misc.h.
#
###############################################################################

#  Head of config.h:
printf "/*
 *  THIS FILE IS AUTOMATICALLY CREATED BY configure!
 *  DON'T EDIT THIS FILE MANUALLY, IT WILL BE OVERWRITTEN.
 */
\n#ifndef CONFIG_H\n#define CONFIG_H\n\n" > config.h


#  Figure out if VERSION should be defined.
X=`basename \`pwd\`|cut -d \- -f 2-`
if [ z"$X" = zgxemul ]; then
	printf "/*  No VERSION  */\n" >> config.h
else
	printf "#define VERSION \"$X\"\n" >> config.h
fi


if [ z"$UNSTABLE" = zYES ]; then
	printf "#define UNSTABLE_DEVEL\n" >> config.h
fi

if [ z"$DEBUG" = zYES ]; then
	# Debug-specific flags:
	CXXFLAGS="-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC $CXXFLAGS"
else
	# Normal build flags:
	CXXFLAGS="-DNDEBUG $CXXFLAGS"
fi

if [ z"$WITHUNITTESTS" = zYES ]; then
	printf "#define WITHUNITTESTS\n" >> config.h
fi


printf "\n" >> config.h


###############################################################################
#
#  Special hacks for some host OSes:
#
###############################################################################

if [ z"`uname|cut -c 1-6`" = zCYGWIN ]; then
	CYGWIN=YES

	#  Assume GCC/g++ on Cygwin (Windows) systems.
	if [ z"$CXX" = z ]; then
		CXX=g++
	fi
fi

if [ z"`uname`" = zHP-UX ]; then
	HPUX=YES

	if [ z"$CC" = z ]; then
		if [ -f /usr/local/pa64/bin/gcc ]; then
			CC=/usr/local/pa64/bin/gcc
		fi
	fi
	
	# TODO: How about HP-UX C++?
fi

if [ z"`uname`" = zOSF1 ]; then
	OSF1=YES
fi

if [ z"`uname`" = zSunOS ]; then
	printf "#define SOLARIS\n" >> config.h
	OTHERLIBS="-lsocket $OTHERLIBS"
fi


###############################################################################
#
#  Create the Makefile header:
#
###############################################################################

rm -f _Makefile.header

printf "#
#  DO NOT EDIT THIS FILE! It is automagically created by
#  the configure script, based on Makefile.skel.
#\n\n" >> _Makefile.header


#  Try with the simplest possible test program. Actually, test static variables
#  as well, because GXemul uses things like NULL-initialized global pointers,
#  and it is important that they work. (GCC on Solaris is known to be completely
#  broken, for instance.)

echo '#include <stdio.h>

int main(int argc, char *argv[])
{
        static int x = 0;
        static int y = 1;
        printf("%i,%i", x, y);
        return 0;
}
' > _testprog.cc


###############################################################################
#  Try to detect which C++ compiler to use, if CXX is not set:
printf "checking which C++ compiler to use... "
rm -f _testprog
if [ z"$CXX" = z ]; then
	#  Try g++ first:
	printf "#!/bin/sh\ng++ $CXXFLAGS _testprog.cc -o _testprog >" > _test.sh
	printf " /dev/null 2> /dev/null\n" >> _test.sh
	chmod 755 _test.sh
	./_test.sh > /dev/null 2> /dev/null
	if [ -x _testprog ]; then
		if [ z`./_testprog` = z0,1 ]; then
			CXX=g++
		fi
	fi
	rm -f _testprog

	#  If both g++ and c++ exist, then c++ might be a vendor specific
	#  compiler which produces faster code than g++.
	printf "#!/bin/sh\nc++ $CXXFLAGS _testprog.cc -o _testprog >" > _test.sh
	printf " /dev/null 2> /dev/null\n" >> _test.sh
	chmod 755 _test.sh
	./_test.sh > /dev/null 2> /dev/null
	if [ -x _testprog ]; then
		if [ z`./_testprog` = z0,1 ]; then
			CXX=c++
		else
			printf "broken C++ compiler detected (c++)!\n"
		fi
	fi
	rm -f _testprog

	rm -f _test.sh
fi

rm -f _testprog

if [ z"$CXX" = z ]; then
	printf "no working C++ compiler detected\n"
	printf "\nPlease set the CXX environment variable to a working C++ "
	printf "compiler before running\nthe configure script, and make"
	printf " sure that the CXXFLAGS environment variable\nis also valid"
	printf " for that compiler.\n"
	exit
fi

printf "$CXX"

CCTYPE="generic"

if $CXX $CXXFLAGS -v 2>&1 | grep gcc 1> /dev/null 2> /dev/null; then
	GCCXX=YES
	CXXTYPE="GNU C++"
fi

if [ z"$CYGWIN" = zYES ]; then
	CXXTYPE="$CXXTYPE (Cygwin)"
fi

echo " ($CXXTYPE)"



###############################################################################
if [ ! z$WITHX11 = zNO ]; then
	printf "checking for X11 headers and libs... "

	#  Try to compile a small X11 test program:
	printf "#include <X11/Xlib.h>
	#include <stdio.h>
	Display *dis;
	void f(void) {
		dis = XOpenDisplay(NULL);
	}
	int main(int argc, char *argv[])
	{ return 0; }
	" > _test_x11.cc

	XOK=0

	XINCLUDE=-I/usr/local/include
	$CXX $CXXFLAGS _test_x11.cc -c -o _test_x11.o $XINCLUDE 2> /dev/null

	XLIB="-L/usr/local/lib -lX11"
	$CXX $CXXFLAGS _test_x11.o -o _test_x11 $XLIB 2> /dev/null

	if [ -x _test_x11 ]; then
		XOK=1
	fi

	rm -f _test_x11 _test_x11.o

	if [ z$XOK = z0 ]; then
		XINCLUDE=-I/usr/X11R6/include
		$CXX $CXXFLAGS _test_x11.cc -c -o _test_x11.o $XINCLUDE 2> /dev/null

		XLIB="-L/usr/X11R6/lib -lX11"
		$CXX $CXXFLAGS _test_x11.o -o _test_x11 $XLIB 2> /dev/null

		if [ -x _test_x11 ]; then
			XOK=1
		fi
	fi
	rm -f _test_x11 _test_x11.o

	#  Special case for some 64-bit Linux/x86_64 systems:
	if [ z$XOK = z0 ]; then
		$CXX $CXXFLAGS _test_x11.cc -c -o _test_x11.o $XINCLUDE 2> /dev/null

		XLIB="-L/usr/X11R6/lib64 -lX11"
		$CXX $CXXFLAGS _test_x11.o -o _test_x11 $XLIB 2> /dev/null

		if [ -x _test_x11 ]; then
			XOK=1
		fi
	fi
	rm -f _test_x11 _test_x11.o

	if [ z$XOK = z0 ]; then
		XINCLUDE=""
		$CXX $CXXFLAGS _test_x11.cc -c -o _test_x11.o $XINCLUDE 2> /dev/null

		#  -lsocket for Solaris
		XLIB="-lX11 -lsocket"
		$CXX $CXXFLAGS _test_x11.o -o _test_x11 $XLIB 2> /dev/null

		if [ -x _test_x11 ]; then
			XOK=1
		fi
		rm -f _test_x11 _test_x11.o
	fi

	if [ z`uname` = zNetBSD ]; then
		echo "Using NetBSD hack for X11 libs..."
		XLIB="$XLIB -Wl,-rpath,/usr/X11R6/lib"
	fi

	if [ z$XOK = z0 ]; then
		echo "Failed to compile X11 test program."
		if [ z$WITHX11 = zYES ]; then
			echo "Aborting."
			exit
		fi
		echo "Note: Configuring without X11. Framebuffer emulation will not be available."
	else
		echo "" "$XINCLUDE $XLIB"
		echo "XINCLUDE=$XINCLUDE" >> _Makefile.header
		echo "XLIB=$XLIB" >> _Makefile.header
		printf "#define WITH_X11\n" >> config.h
	fi

	rm -f _test_x11.cc
fi


if [ z$HPUX = zYES ]; then
	CXXFLAGS="-D_XOPEN_SOURCE_EXTENDED $CXXFLAGS"
	printf "#define HPUX\n" >> config.h
fi


if [ z$OSF1 = zYES ]; then
	CXXFLAGS="-D_XOPEN_SOURCE=500 -D_OSF_SOURCE -D_POSIX_PII_SOCKET $CXXFLAGS"
fi


#  C++ warnings:
printf "checking whether -Wall can be used... "
$CXX $CXXFLAGS _testprog.cc -o _testprog -Wall 2> /dev/null
if [ -x _testprog ]; then
	printf "yes\n"
	CXXWARNINGS="-Wall $CXXWARNINGS"

	if [ z"$UNSTABLE" = zYES ]; then
		printf "checking whether -Werror can be used... "
		rm -f _testprog
		$CXX $CXXFLAGS $CXXWARNINGS _testprog.cc -o _testprog -Werror 2> /dev/null
		if [ -x _testprog ]; then
			printf "yes\n"
			CXXWARNINGS="$CXXWARNINGS -Werror"
		else
			printf "no\n"
		fi
	fi
else
	printf "no\n"
fi
rm -f _testprog


if [ z"$UNSTABLE" = zYES ]; then
	printf "checking whether -ansi can be used... "
	$CXX $CXXFLAGS -ansi _testprog.cc -o _testprog 2> /dev/null
	if [ -x _testprog ]; then
		printf "yes\n"
		CPEDANTIC="$CPEDANTIC -ansi"
	else
		printf "no\n"
	fi
	rm -f _testprog
fi


if [ z"$UNSTABLE" = zYES ]; then
	printf "checking whether -pedantic can be used... "
	$CXX $CXXFLAGS $CPEDANTIC -pedantic _testprog.cc -o _testprog 2> /dev/null
	if [ -x _testprog ]; then
		printf "yes\n"
		CPEDANTIC="$CPEDANTIC -pedantic"
	else
		printf "no\n"
	fi
	rm -f _testprog
fi


#  -Wstrict-aliasing
if [ ! z"$DEBUG" = zYES ]; then
	printf "checking whether -Wstrict-aliasing can be used... "
	$CXX $CXXFLAGS $CPEDANTIC -Wstrict-aliasing _testprog.cc -o \
	    _testprog 1> _testprog.stdout 2>&1
	cat _testprog.stdout >> _testprog.error
	if grep frame _testprog.error > /dev/null 2>&1; then
		printf "no\n"
	else
		if [ -x _testprog ]; then
			CXXWARNINGS="-Wstrict-aliasing $CXXWARNINGS"
			printf "yes\n"
		else
			printf "no\n"
		fi
	fi
	rm -f _testprog _testprog.error _testprog.stdout
fi


if [ ! z"$DEBUG" = zYES ]; then
	printf "checking whether -O style optimization can be used... "
	OOPTIMS="no"
	$CXX $CXXFLAGS _testprog.cc -o _testprog -O 2> /dev/null
	if [ -x _testprog ]; then
		rm -f _testprog
		$CXX $CXXFLAGS _testprog.cc -o _testprog -O3 2> /dev/null
		if [ -x _testprog ]; then
			OOPTIMS="-O3"
		else
			OOPTIMS="-O"
		fi
	fi
	echo $OOPTIMS
	if [ ! z$OOPTIMS = zno ]; then
		CXXFLAGS="$OOPTIMS $CXXFLAGS"
	fi
fi
rm -f _testprog


#  -fstrict-aliasing
if [ ! z"$DEBUG" = zYES ]; then
	printf "checking whether -fstrict-aliasing can be used... "
	$CXX $CXXFLAGS $CPEDANTIC -fstrict-aliasing _testprog.cc -o \
	    _testprog 1> _testprog.stdout 2>&1
	cat _testprog.stdout >> _testprog.error
	if grep frame _testprog.error > /dev/null 2>&1; then
		printf "no\n"
	else
		if [ -x _testprog ]; then
			CXXFLAGS="-fstrict-aliasing $CXXFLAGS"
			printf "yes\n"
		else
			printf "no\n"
		fi
	fi
	rm -f _testprog _testprog.error _testprog.stdout
fi


#  -g, for development builds
if [ z"$UNSTABLE" = zYES ]; then
	printf "checking whether -g can be used... "
	$CXX $CXXFLAGS -g _testprog.cc -o _testprog > _testprog.stdout 2>&1
	cat _testprog.stdout >> _testprog.error
	if [ -x _testprog ]; then
		CXXFLAGS="-g $CXXFLAGS"
		printf "yes\n"
	else
		printf "no\n"
	fi
	rm -f _testprog _testprog.error _testprog.stdout
fi


#  -lm?
printf "checking for math libs..."
printf "#include <math.h>\nint main(int argc, char *argv[]) { " > _testr.cc
printf "double x = sqrt(sin((double)argc)); return (int)x; }\n" >> _testr.cc
$CXX $CXXFLAGS $CPEDANTIC _testr.cc -o _testr 2> /dev/null
if [ ! -x _testr ]; then
	$CXX $CXXFLAGS $CPEDANTIC _testr.cc -lm -o _testr 2> /dev/null
	if [ ! -x _testr ]; then
		$CXX $CXXFLAGS $CPEDANTIC _testr.cc -lm -lcpml -o _testr 2> /dev/null
		if [ ! -x _testr ]; then
			printf "\nWARNING! Could not compile math test "
			printf "at all!\nContinuing anyway.\n\n"
		else
			#  -lm AND -lcpml
			OTHERLIBS="-lm -lcpml $OTHERLIBS"
			printf " -lm -lcpml\n"
		fi
	else
		#  Normal -lm
		OTHERLIBS="-lm $OTHERLIBS"
		printf " -lm\n"
	fi
else
	printf " none needed\n"
fi
rm -f _testr.* _testr


#  MAP_ANON missing? (On some HP-UX systems? Use MAP_ANONYMOUS instead.)
printf "checking for MAP_ANON... "
rm -f _tests
printf "#include <stdio.h>
#include <sys/types.h>
#include <sys/mman.h>
int main(int argc, char *argv[]) { int x = MAP_ANON; return 0;}\n" > _tests.cc
$CXX $CXXFLAGS $CPEDANTIC _tests.cc -o _tests 2> /dev/null
if [ ! -x _tests ]; then
	printf "#include <stdio.h>
#include <sys/types.h>
#include <sys/mman.h>
int main(int argc, char *argv[])
{ int x = MAP_ANONYMOUS; return 0;}\n" > _tests.cc
	$CXX $CXXFLAGS $CPEDANTIC _tests.cc -o _tests 2> /dev/null
	if [ ! -x _tests ]; then
		printf "no\n\n"
		printf "WARNING! Neither MAP_ANON nor MAP_ANONYMOUS work on "
		printf "this system.\nPlease try to compile anyway, and report"
		printf " to me whether it builds/runs or not.\n\n"
		printf "#define MAP_ANON 0\n" >> config.h
		printf "#define NO_MAP_ANON\n" >> config.h
	else
		printf "using MAP_ANONYMOUS\n"
		printf "#define MAP_ANON MAP_ANONYMOUS\n" >> config.h
	fi
else
	printf "yes\n"
fi
rm -f _tests.* _tests


#  Check for 64-bit off_t:
printf "checking for 64-bit off_t... "
printf "#include <stdio.h>\n#include <inttypes.h>\n#include <sys/types.h>\n
int main(int argc, char *argv[]){printf(\"%%i\\\n\",
 (int)sizeof(off_t));return 0;}\n" > _testoff.cc
$CXX $CXXFLAGS $CPEDANTIC _testoff.cc -o _testoff 2> /dev/null
if [ ! -x _testoff ]; then
	printf "\nWARNING! COULD NOT COMPILE off_t TEST PROGRAM AT ALL!\n"
else
	if [ z`./_testoff` = z8 ]; then
		printf "yes\n"
	else
		$CXX $CXXFLAGS $CPEDANTIC -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE \
		    _testoff.cc -o _testoff 2> /dev/null
		if [ ! -x _testoff ]; then
			printf "\nWARNING! COULD NOT COMPILE off_t TEST "
			printf "PROGRAM!\n"
		else
			if [ z`./_testoff` = z8 ]; then
				CXXFLAGS="-D_FILE_OFFSET_BITS=64 $CXXFLAGS"
				CXXFLAGS="-D_LARGEFILE_SOURCE $CXXFLAGS"
				printf "using -D_FILE_OFFSET_BITS=64"
				printf " -D_LARGEFILE_SOURCE\n"
			else
				printf "NO\n"
				printf "WARNING! No 64-bit off_t. Continuing "
				printf "anyway.\n"
			fi
		fi
	fi
fi
rm -f _testoff.* _testoff


#  Check for u_int8_t etc:
#  These are needed because some header files in src/include/ use u_int*
#  instead of uint*, and I don't have time to rewrite them all.
printf "checking for u_int8_t... "
printf "#include <stdio.h>\n#include <inttypes.h>\n#include <sys/types.h>\n
int main(int argc, char *argv[]){printf(\"%%i\\\n\",
 (int)sizeof(u_int8_t));return 0;}\n" > _testuint.cc
$CXX $CXXFLAGS $CPEDANTIC _testuint.cc -o _testuint 2> /dev/null
if [ ! -x _testuint ]; then
	rm -f _testuint*
	printf "#include <stdio.h>\n#include <inttypes.h>
	\n#include <sys/types.h>\nint main(int argc, char *argv[])
	{printf(\"%%i\\\n\", (int)sizeof(uint8_t));return 0;}\n" > _testuint.cc
	$CXX $CXXFLAGS $CPEDANTIC _testuint.cc -o _testuint 2> /dev/null
	if [ ! -x _testuint ]; then
		printf "no\n\nERROR: No u_int8_t or uint8_t. Aborting\n"
		#  TODO: Automagically detect using various combinations
		#  of char, int, short, long etc.
		exit
	fi

	printf "typedef uint8_t u_int8_t;\n" >> config.h
	printf "typedef uint16_t u_int16_t;\n" >> config.h
	printf "typedef uint32_t u_int32_t;\n" >> config.h
	printf "uint8_t\n"
else
	printf "yes\n"
fi
rm -f _testuint.cc _testuint

printf "checking for u_int64_t... "
printf "#include <stdio.h>\n#include <inttypes.h>\n#include <sys/types.h>\n
int main(int argc, char *argv[]){printf(\"%%i\\\n\",
 (int)sizeof(u_int64_t));return 0;}\n" > _testuint.cc
$CXX $CXXFLAGS $CPEDANTIC _testuint.cc -o _testuint 2> /dev/null
if [ ! -x _testuint ]; then
	rm -f _testuint*
	printf "#include <stdio.h>\n#include <inttypes.h>
	\n#include <sys/types.h>\nint main(int argc, char *argv[])
	{printf(\"%%i\\\n\", (int)sizeof(uint64_t));return 0;}\n" > _testuint.cc
	$CXX $CXXFLAGS $CPEDANTIC _testuint.cc -o _testuint 2> /dev/null
	if [ ! -x _testuint ]; then
		printf "no\n\nERROR: No u_int64_t or uint64_t. Aborting\n"
		#  TODO: Automagically detect using various combinations
		#  of char, int, short, long etc.
		exit
	fi

	printf "typedef uint64_t u_int64_t;\n" >> config.h
	printf "uint64_t\n"
else
	printf "yes\n"
fi
rm -f _testuint*

printf "checking for __FUNCTION__... "
printf "#include <stdio.h>\n\nint main(int argc, char *argv[]) {
  if (__FUNCTION__) printf(__FUNCTION__);\n  return 0;\n}\n" > _testfunction.cc
$CXX $CXXFLAGS $CPEDANTIC _testfunction.cc -o _testfunction 2> /dev/null
if [ ! -x _testfunction ]; then
	printf "no\n"
else
	if [ z`./_testfunction` = zmain ]; then
		printf "yes\n"
		printf "#define HAVE___FUNCTION__\n" >> config.h
	else
		printf "no\n"
	fi
fi
rm -f _testfunction*


###############################################################################

#  Host byte order?
printf "checking host endianness... "
rm -f _test_end*
printf '#include <stdio.h>
int main(int argc, char *argv[])
{  int x = 1; void *xp = (void *)&x; char *p = (char *)xp;
if (*p) printf("little\\\n"); else printf("big\\\n"); }
' > _test_end.cc
$CXX $CXXFLAGS $CPEDANTIC _test_end.cc -o _test_end 2> /dev/null
X=`./_test_end`
echo $X
if [ z$X = zlittle ]; then
	printf "#define HOST_LITTLE_ENDIAN\n" >> config.h
else
	if [ z$X = zbig ]; then
		printf "#define HOST_BIG_ENDIAN\n" >> config.h
	else
		echo "Error! Could not determine host's endianness."
		exit
	fi
fi
rm -f _test_end*


###############################################################################

printf "detecting native code generation ABI... "

if [ z$WITHNATIVECODE = zNO ]; then
	echo "skipping"
else
	if [ z"`uname -m`" = zamd64 ]; then
		NATIVE_CODE_GENERATION=YES
		printf "amd64\n"
		printf "#define NATIVE_CODE_GENERATION\n" >> config.h
		printf "#define NATIVE_ABI_AMD64\n" >> config.h
	fi

	if [ z"`uname -m`" = zalpha ]; then
		NATIVE_CODE_GENERATION=YES
		printf "alpha\n"
		printf "#define NATIVE_CODE_GENERATION\n" >> config.h
		printf "#define NATIVE_ABI_ALPHA\n" >> config.h
	fi

	if [ z"`uname -m`" = zx86_64 ]; then
		NATIVE_CODE_GENERATION=YES
		printf "amd64\n"
		printf "#define NATIVE_CODE_GENERATION\n" >> config.h
		printf "#define NATIVE_ABI_AMD64\n" >> config.h
	fi

	if [ z$NATIVE_CODE_GENERATION = z ]; then
		printf "sorry, not implemented for "`uname -m`" yet\n"
	fi
fi


###############################################################################

printf "checking for Doxygen... "

if (doxygen --version > /dev/null); then
	echo found
	DOXYGEN=doxygen
else
	# Not found is already printed, if doxygen is not found.
	DOXYGEN="\#"
fi


###############################################################################

if [ "z$PREFIX" = z ]; then
	PREFIX="$DEFAULTPREFIX"
fi	
echo "checking for 'make install' prefix: $PREFIX"


###############################################################################

printf "checking for locale install path... "
TRANSLATIONS=""
TRANSLATIONSUNINSTALL=""

if [ ! z$WITHI18N = zNO ]; then
	rm -f _testintl*
	printf '#include <stdio.h>
#include <libintl.h>

int main(int argc, char *argv[])
{
        printf("%%s\\n", bindtextdomain("gxemul", NULL));
        return 0;
}
' > _testintl.cc
	$CXX $CXXFLAGS _testintl.cc -o _testintl 2> /dev/null
	if [ -x _testintl ]; then
		TRANSLATIONS=translations
		TRANSLATIONSUNINSTALL=translations_uninstall
		TRANSLATIONSPREFIX=`./_testintl`
		echo $TRANSLATIONSPREFIX
		printf "#define I18N\n" >> config.h
	else
		$CXX $CXXFLAGS -I/usr/local/include -L/usr/local/lib -lintl _testintl.cc -o _testintl 2> /dev/null
		if [ -x _testintl ]; then
			TRANSLATIONS=translations
			TRANSLATIONSUNINSTALL=translations_uninstall
			TRANSLATIONSPREFIX=`./_testintl`
			CXXFLAGS="-I/usr/local/include $CXXFLAGS"
			OTHERLIBS="-L/usr/local/lib -lintl $OTHERLIBS"
			echo $TRANSLATIONSPREFIX
			printf "#define I18N\n" >> config.h
		else
			printf "no\n"
			if [ z$WITHI18N = zYES ]; then
				echo Could not compile I18N test program.
				echo Aborting.
				exit
			fi
		fi
	fi
	rm -f _testintl*
else
	echo skipping
fi


###############################################################################

GLIBMM_VER="2.18.1"
printf "checking for glibmm-2.4 >= $GLIBMM_VER... "

if [ z$WITHGLIBMM = zNO ]; then
	echo skipping
else
	if pkg-config --atleast-version=$GLIBMM_VER glibmm-2.4; then
		echo found
		CXXFLAGS="$CXXFLAGS `pkg-config --cflags glibmm-2.4`"
		OTHERLIBS="$OTHERLIBS `pkg-config --libs glibmm-2.4`"
		CXXFLAGS="$CXXFLAGS -DWITH_GLIBMM"
		WITHGLIBMM=YES
	else
		echo not found
		if [ z$WITHGLIBMM = zYES ]; then
			echo "Sorry, glibmm-2.4 version $GLIBMM_VER or newer" \
			    "was not found. Aborting."
			exit
		fi
	fi
fi



###############################################################################

INCLUDE=-Iinclude/
INCLUDE1=-I../include/
INCLUDE2=-I../../include/

rm -f _testprog*

echo C++ compiler flags: $CXXFLAGS $CXXWARNINGS
echo C++ pedantic flags: $CPEDANTIC
echo Linker flags: $OTHERLIBS

echo "INCLUDE=$INCLUDE" >> _Makefile.header
echo "INCLUDE1=$INCLUDE1" >> _Makefile.header
echo "INCLUDE2=$INCLUDE2" >> _Makefile.header
echo "PREFIX=$PREFIX" >> _Makefile.header

echo "CXX=$CXX" >> _Makefile.header
echo "CXXOPTIM=$CXXFLAGS" >> _Makefile.header
echo "CXXWARNINGS=$CXXWARNINGS" >> _Makefile.header
echo "CPEDANTIC=$CPEDANTIC" >> _Makefile.header

echo "OTHERLIBS=$OTHERLIBS" >> _Makefile.header

echo "TRANSLATIONS=$TRANSLATIONS" >> _Makefile.header
echo "TRANSLATIONSUNINSTALL=$TRANSLATIONSUNINSTALL" >> _Makefile.header
echo "TRANSLATIONSPREFIX=$TRANSLATIONSPREFIX" >> _Makefile.header

echo "DOXYGEN=$DOXYGEN" >> _Makefile.header
echo "" >> _Makefile.header

#  Create list of unit testable classes:
rm -f unittest.h unittest_h.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> unittest.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> unittest_h.h
printf "// Will be removed by  make clean_all\n\n" >> unittest.h
printf "// Will be removed by  make clean_all\n\n" >> unittest_h.h
for a in `find src -name "*.cc" -print`; do grep UNITTESTS\( "$a";
	done | cut -d \( -f 2|cut -d \) -f 1 > _unittests.tmp
for a in `cat _unittests.tmp`; do
	if [ ! z$a = zclassName ]; then
		cd src/include
		HNAME=`find . -name $a.h | cut -c 3-`
		cd ../..
		printf "#include \"$HNAME\"\n" >> unittest_h.h
		printf "\t$a::RunUnitTests(nSucceeded, nFailed);\n" >> unittest.h
	fi
done
rm -f _unittests.tmp

#  Create a list of Commands:
rm -f commands_h.h commands.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> commands.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> commands_h.h
printf "// Will be removed by  make clean_all\n\n" >> commands.h
printf "// Will be removed by  make clean_all\n\n" >> commands_h.h
for a in src/main/commands/*.cc; do echo $a|cut -d / -f 4-; done > _commands.tmp
for a in `cat _commands.tmp`; do
	CNAME=`echo $a|cut -d . -f 1`
	printf "#include \"commands/$CNAME.h\"\n" >> commands_h.h
	printf "\tAddCommand(new $CNAME);\n" >> commands.h
done
rm -f _commands.tmp

#  Create a list of Components:
rm -f components.h components_h.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> components.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> components_h.h
printf "// Will be removed by  make clean_all\n\n" >> components.h
printf "// Will be removed by  make clean_all\n\n" >> components_h.h
grep COMPONENT\( src/include/components/*.h|cut -d \( -f 2|cut -d \) -f 1 > _components.tmp
cd src/include/components
for a in `cat ../../../_components.tmp`; do
	CNAME=`grep COMPONENT\($a\) *.h|cut -d . -f 1`
	printf "#include \"components/$CNAME.h\"\n" >> ../../../components_h.h
	printf "\t{ \"$a\", $CNAME::Create, $CNAME::GetAttribute },\n" >> ../../../components.h
done
cd ../../..
rm -f _components.tmp

#  Create the Makefiles:
D=". po src src/components"
D="$D src/components/busses src/components/cpu src/components/dummy"
D="$D src/components/machines src/components/memory"
D="$D src/ir"
D="$D src/main src/main/actions src/main/commands src/main/fileloaders"
D="$D src/ui src/ui/console src/ui/nullui"
D="$D src/include"
for a in $D; do
	echo "creating $a/Makefile"
	touch $a/Makefile
	cat _Makefile.header > $a/Makefile
	cat $a/Makefile.skel >> $a/Makefile
done

#  Tail of config.h:
printf "\n#endif  /*  CONFIG_H  */\n" >> config.h

#  Remove temporary Makefile header:
rm -f _Makefile.header

echo Configured. You may now run make to build gxemul.

