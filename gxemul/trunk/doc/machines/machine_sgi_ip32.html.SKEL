
The <tt>sgi_ip32</tt> machine template tries to emulate an
<a href="http://en.wikipedia.org/wiki/SGI_O2">SGI O2</a> machine,
for experiments with primarily
<a href="http://www.netbsd.org/ports/sgimips/">NetBSD/sgimips</a>,
<a href="http://openbsd.org/sgi.html">OpenBSD/sgi</a>, and
<a href="http://ftp.debian.org/debian/dists/Debian8.11/main/installer-mips/current/images/r5k-ip32/">Linux for O2</a>.


<p><br>
<h3>Experimenting with a PROM from a real SGI O2:</h3>

This requires that you dump the PROM memory range from your real SGI O2
machine into a file. Using a serial console hooked up to your O2, executing
the PROM command
<pre>
	&gt;&gt; <b>dump -b 0xBFC00000:0xBFC80000</b>
</pre>
will dump 512 KB of the PROM range. Make sure you capture all the output
into a file, and then convert the result into a raw binary. (If you don't have
time to write a converter tool yourself, there is an example converter in
the GXemul source code distribution: <tt>experiments/sgiprom_to_bin</tt>.)

<p>
<font color="#ff0000">NOTE: THE SGI O2 EMULATION MODE IN THE NEW FRAMEWORK
IS <b>NOT WORKING YET AT ALL</b>! These are preliminary
instructions on how it <i>may</i> work when the new GXemul framework, and
in particular the SGI O2 emulation within that framework, is complete enough.</font>

<p>
<font color="#ff0000">The new framework is planned to support things such
as emulation of real CPU caches, and RAM at a non-zero base address,
features used by the SGI O2 (and its PROM).</font>

<p>Assuming you have extracted the PROM from your real machine into a
file called <tt>prom</tt>, the following example shows how to start up the
emulator in the paused state with the PROM image:

<pre>
$ <b>gxemul -V -e sgi_ip32 raw:0xffffffffbfc00000:prom</b>
GXemul (unknown version)      Copyright (C) 2003-2009  Anders Gavare

  mainbus0
  |-- ram0  (128 MB at offset 0)
  |-- prom0  (512 KB at offset 0x1fc00000)
  \-- cpu0  (R5000, 100 MHz)

cpu0: raw:0xffffffffbfc00000:prom loaded
      Raw file: entry point 0xffffffffbfc00000
      loadable chunk: vaddr 0xffffffffbfc00000, 524288 bytes

GXemul>
</pre>



<p><br><b>Legacy framework</b>

<p>As the new framework is <b>not</b> working yet, and especially the SGI O2
emulation mode in it, the following notes about the <i>legacy framework</i>
may also be of interest.

<p>In order to experiment with a raw PROM dump using the legacy framework,
the following command line may be used as a starting point:

<pre>
$ <b>gxemul -QXeo2 0xbfc00000:prom</b>
</pre>

<p><tt>-Q</tt> turns off GXemul's built-in PROM emulation, allowing raw PROM images
to be used. <tt>-X</tt> is used to display the graphical framebuffer. (<tt>-X</tt> can be
omitted if only serial console is what you want.) And finally, <tt>-e o2</tt> selects
the O2 emulation mode. 0xbfc00000 is the standard ROM address for MIPS-based
systems.

<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="../sgi-o2-real.jpg"><img src="../sgi-o2-real_small.jpg"></a>
&nbsp;&nbsp;&nbsp;
<a href="../20180910-sgiip32prom-4.13.png">
<img src="../20180910-sgiip32prom-4.13.png" width=250>
</a>

<p>The photo on the left is from the real machine. The screenshot to the right
is from the emulator.

<p><font color="#ff0000">
NOTE: The SGI O2 PROM does some hardware tests during startup that do not
work in GXemul, in particular cache detection. So right now,
there is a hack/workaround which skips cache detection in an ugly way.
This has been verified to work with PROM versions 2.3, 4.13, and 4.18.
For other versions, it may need to be manually skipped.</font>

<p>With a IP32 PROM version 4.13 for example, if the hack is commented out,
the cache detection routine at 0xbfc05180 must be skipped:

<pre>
$ <b>gxemul -p 0xffffffffbfc05180 -X -Q -e o2 0xbfc00000:prom-4.13</b>

<i>...
when the breakpoint is hit, type:</i>

pc = ra
continue
</pre>

<p>If the 'console' variable in the PROM's environment variable section
was set to something starting with 'g', output will be graphical, otherwise
it will be to serial console.

<p>Note however that almost nothing works; <b>most importantly, SCSI is not
implemented for the SGI O2</b>, so the emulated machine will not be able
to boot from any kind of disk or CDROM. Audio
or video hardware is not emulated at all yet either.
Also, the graphics emulation is very likely to be wrong. 

<p>Experimenting with the PROM from your own machine may be fun, but
having a PROM image is <i>not</i> needed if what you want to do is to
run guest operating systems. In that case, skip the PROM image, skip the
<tt>-Q</tt> command line option, and simply supply the name of the
operating system kernel to run instead. Any PROM calls will get faked
responses by the emulator.


<p><hr>
</body>
</html>
