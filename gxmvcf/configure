#!/bin/sh
###############################################################################
#
#  Copyright (C) 2003-2008  Anders Gavare.  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. The name of the author may not be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
#  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGE.
#
#
#  This is a minimal configure script, hardcoded for GXmvcf. This script
#  figures out which C++ compiler flags will work, and creates Makefiles in
#  sub-directories. config.h and some other build-specific .h files are also
#  created.
#
#
#    --->     FOR NORMAL USE, JUST RUN ./configure WITHOUT OPTIONS!
#
#
#  The main things that are detected by this script:
#
#    o)  special hacks for some OSes
#    o)  which C++ compiler to use  (overridden by setting CXX)
#    o)  which compiler flags to use  (overridden by setting CXXFLAGS)
#
#  The general philosophy regarding command line switches is that anything
#  which can be incorporated into the program as a runtime command line option
#  should be, instead of requiring a recompile.
#
###############################################################################

# Default prefix for "make install"
DEFAULTPREFIX=/usr/local/include

DEBUG=YES

if [ z"$*" != z ]; then
	#  Parse command line options:
	for a in $*; do
		if [ z$a = z--ndebug ]; then
			DEBUG=NO
		else if [ z$a = z--help ]; then
			printf "usage: $0 [options]\n\n"
			echo "  --ndebug                   configure" \
				"for a non-debug build"
			echo
			echo "If the PREFIX environment variable is set," \
			    "it will override the default"
			echo "value, which is: $DEFAULTPREFIX"
			echo
			exit
		else
			echo "Invalid option: $a"
			echo "Run  $0 --help  to get a list of" \
			    "available options."
			exit
		fi; fi
	done
fi


###############################################################################
#
#  Configure options:
#
#  This creates a config.h file, which is then included from include/misc.h.
#
###############################################################################

#  Head of config.h:
printf "/*
 *  THIS FILE IS AUTOMATICALLY CREATED BY configure!
 *  DON'T EDIT THIS FILE MANUALLY, IT WILL BE OVERWRITTEN.
 */
\n#ifndef CONFIG_H\n#define CONFIG_H\n\n" > config.h


#  Figure out if VERSION should be defined.
X=`basename \`pwd\`|cut -d \- -f 2-`
if [ z"$X" = zgxmvcf ]; then
	printf "#define VERSION \"(unknown version)\"\n" >> config.h
else
	printf "#define VERSION \"$X\"\n" >> config.h
fi


if [ z"$DEBUG" = zYES ]; then
	CXXFLAGS="-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC $CXXFLAGS"
else
	CXXFLAGS="-DNDEBUG $CXXFLAGS"
fi


###############################################################################
#
#  Special hacks for some host OSes:
#
###############################################################################

if [ z"`uname|cut -c 1-6`" = zCYGWIN ]; then
	CYGWIN=YES

	#  Assume gcc/g++ on Cygwin (Windows) systems.
	if [ z"$CC" = z ]; then
		CC=gcc
	fi
	if [ z"$CXX" = z ]; then
		CXX=g++
	fi
fi

if [ z"`uname`" = zHP-UX ]; then
	HPUX=YES

	if [ z"$CC" = z ]; then
		if [ -f /usr/local/pa64/bin/gcc ]; then
			CC=/usr/local/pa64/bin/gcc
		fi
	fi
	
	# TODO: How about HP-UX C++?
fi

if [ z"`uname`" = zOSF1 ]; then
	OSF1=YES
fi


###############################################################################
#
#  Create the Makefile header:
#
###############################################################################

rm -f _Makefile.header

printf "#
#  DO NOT EDIT THIS FILE! It is automagically created by
#  the configure script, based on Makefile.skel.
#\n\n" >> _Makefile.header


#  Try with the simplest possible test program.
echo '#include <stdio.h>

int main(int argc, char *argv[])
{
        static int x = 0;
        static int y = 1;
        printf("%i,%i", x, y);
        return 0;
}
' > _testprog.cc


#  Try to detect which C++ compiler to use, if CXX is not set:
printf "checking which C++ compiler to use... "
rm -f _testprog
if [ z"$CXX" = z ]; then
	#  Try g++ first:
	printf "#!/bin/sh\ng++ $CXXFLAGS _testprog.cc -o _testprog >" > _test.sh
	printf " /dev/null 2> /dev/null\n" >> _test.sh
	chmod 755 _test.sh
	./_test.sh > /dev/null 2> /dev/null
	if [ -x _testprog ]; then
		if [ z`./_testprog` = z0,1 ]; then
			CXX=g++
		fi
	fi
	rm -f _testprog

	#  If both g++ and c++ exist, then c++ might be a vendor specific
	#  compiler which produces faster code than g++.
	printf "#!/bin/sh\nc++ $CXXFLAGS _testprog.cc -o _testprog >" > _test.sh
	printf " /dev/null 2> /dev/null\n" >> _test.sh
	chmod 755 _test.sh
	./_test.sh > /dev/null 2> /dev/null
	if [ -x _testprog ]; then
		if [ z`./_testprog` = z0,1 ]; then
			CXX=c++
		else
			printf "broken C++ compiler detected (c++)!\n"
		fi
	fi
	rm -f _testprog

	rm -f _test.sh
fi

rm -f _testprog

if [ z"$CXX" = z ]; then
	printf "no working C++ compiler detected\n"
	printf "\nPlease set the CXX environment variable to a working C++ "
	printf "compiler before running\nthe configure script, and make"
	printf " sure that the CXXFLAGS environment variable\nis also valid"
	printf " for that compiler.\n"
	exit
fi

echo "$CXX"


if [ z$HPUX = zYES ]; then
	CXXFLAGS="-D_XOPEN_SOURCE_EXTENDED $CXXFLAGS"
	printf "#define HPUX\n" >> config.h
fi


if [ z$OSF1 = zYES ]; then
	CXXFLAGS="-D_XOPEN_SOURCE=500 -D_OSF_SOURCE -D_POSIX_PII_SOCKET $CXXFLAGS"
fi


#  -Wall:
printf "checking whether -Wall can be used... "
$CXX -Wall $CXXFLAGS _testprog.cc -o _testprog 2> /dev/null
if [ -x _testprog ]; then
	printf "yes\n"
	CXXFLAGS="-Wall $CXXFLAGS"

	printf "checking whether -Werror can be used... "
	rm -f _testprog
	$CXX -Werror $CXXFLAGS _testprog.cc -o _testprog 2> /dev/null
	if [ -x _testprog ]; then
		printf "yes\n"
		CXXFLAGS="-Werror $CXXFLAGS"
	else
		printf "no\n"
	fi
else
	printf "no\n"
fi
rm -f _testprog


printf "checking whether -ansi can be used... "
$CXX $CXXFLAGS -ansi _testprog.cc -o _testprog 2> /dev/null
if [ -x _testprog ]; then
	printf "yes\n"
	CXXFLAGS="$CXXFLAGS -ansi"
else
	printf "no\n"
fi
rm -f _testprog


printf "checking whether -pedantic can be used... "
$CXX $CXXFLAGS -pedantic _testprog.cc -o _testprog 2> /dev/null
if [ -x _testprog ]; then
	printf "yes\n"
	CPEDANTIC="-pedantic"
else
	printf "no\n"
fi
rm -f _testprog


#  -O-style Optimization flags:
if [ z"$SUNCC" = zYES ]; then
	if [ ! z"$DEBUG" = zYES ]; then
		CXXFLAGS="-xO5 -xdepend $CXXFLAGS"
	fi
else
	if [ ! z"$DEBUG" = zYES ]; then
		$CXX $CXXFLAGS -O _testprog.cc -o _testprog 2> /dev/null
		if [ -x _testprog ]; then
			rm -f _testprog
			$CXX $CXXFLAGS -O3 _testprog.cc -o _testprog 2> /dev/null
			if [ -x _testprog ]; then
				CXXFLAGS="$CXXFLAGS -O3"
			else
				CXXFLAGS="$CXXFLAGS -O"
			fi
		fi
	fi
fi
rm -f _testprog


printf "checking whether -g can be used... "
$CXX $CXXFLAGS -g _testprog.cc -o _testprog > _testprog.stdout 2>&1
cat _testprog.stdout >> _testprog.error
if [ -x _testprog ]; then
	CXXFLAGS="$CXXFLAGS -g"
	printf "yes\n"
else
	printf "no\n"
fi
rm -f _testprog _testprog.error _testprog.stdout


printf "checking for __FUNCTION__... "
printf "#include <stdio.h>\n\nint main(int argc, char *argv[]) {
  printf(__FUNCTION__);\n  return 0;\n}\n" > _testfunction.cc
$CXX $CXXFLAGS _testfunction.cc -o _testfunction 2> /dev/null
if [ ! -x _testfunction ]; then
	printf "no\n"
else
	if [ z`./_testfunction` = zmain ]; then
		printf "yes\n"
		printf "#define HAVE___FUNCTION__\n" >> config.h
	else
		printf "no\n"
	fi
fi
rm -f _testfunction*


###############################################################################

printf "checking for Doxygen... "

if (doxygen --version > /dev/null); then
	echo found
	DOXYGEN=doxygen
else
	# Not found is already printed, if doxygen is not found.
	DOXYGEN="\#"
fi


###############################################################################

if [ "z$PREFIX" = z ]; then
	PREFIX="$DEFAULTPREFIX"
fi	
echo "checking for 'make install' prefix (\$PREFIX): $PREFIX"


###############################################################################

INCLUDE1="-I. -Igxmvcf"

rm -f _testprog*

# echo "C++ compiler flags: $CXXFLAGS"
# echo "Pedantic flags (for most modules): $CPEDANTIC"
# echo "Linker flags: $OTHERLIBS"

echo "CXXFLAGSBASE=$CXXFLAGS" >> _Makefile.header
echo "CPEDANTIC=$CPEDANTIC" >> _Makefile.header
echo "INCLUDE1=$INCLUDE1" >> _Makefile.header
echo "PREFIX=$PREFIX" >> _Makefile.header
echo "CC=$CC" >> _Makefile.header
echo "CXX=$CXX" >> _Makefile.header
echo "OTHERLIBS=$OTHERLIBS" >> _Makefile.header

echo "DOXYGEN=$DOXYGEN" >> _Makefile.header
echo "" >> _Makefile.header

#  Create list of unit testable classes:
rm -f unittest.h unittest_h.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> unittest.h
printf "// DO NOT EDIT. Automagically generated by the configure script.\n" >> unittest_h.h
printf "// Will be removed by  make clean_all\n\n" >> unittest.h
printf "// Will be removed by  make clean_all\n\n" >> unittest_h.h
for a in `find src -name "*.cc" -print`; do grep UNITTESTS\( "$a";
	done | cut -d \( -f 2|cut -d \) -f 1 > _unittests.tmp
for a in `cat _unittests.tmp`; do
	if [ ! z$a = zclassName ]; then
		cd src/gxmvcf
		HNAME=`find . -name $a.h | cut -c 3-`
		cd ../..
		printf "#include \"$HNAME\"\n" >> unittest_h.h
		printf "void RunUnitTests_$a(int &nSucceeded, int &nFailed);\n" >> unittest_h.h
		printf "\tRunUnitTests_$a(nSucceeded, nFailed);\n" >> unittest.h
	fi
done
rm -f _unittests.tmp

#  Create the Makefiles:
D=". src"
for a in $D; do
	echo "creating $a/Makefile"
	touch $a/Makefile
	cat _Makefile.header > $a/Makefile
	cat $a/Makefile.skel >> $a/Makefile
done

#  Tail of config.h:
printf "\n#endif  /*  CONFIG_H  */\n" >> config.h

#  Remove temporary Makefile header:
rm -f _Makefile.header


echo Configured. You may now run make to build GXmvcf.

